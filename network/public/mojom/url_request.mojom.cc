// services/network/public/mojom/url_request.mojom.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "services/network/public/mojom/url_request.mojom.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/debug/alias.h"
#include "base/hash/md5_constexpr.h"
#include "base/run_loop.h"
#include "base/strings/string_number_conversions.h"
#include "base/trace_event/trace_event.h"
#include "base/trace_event/typed_macros.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/send_message_helper.h"
#include "mojo/public/cpp/bindings/lib/proxy_to_responder.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/mojo_buildflags.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "services/network/public/mojom/url_request.mojom-params-data.h"
#include "services/network/public/mojom/url_request.mojom-shared-message-ids.h"

#include "services/network/public/mojom/url_request.mojom-import-headers.h"
#include "services/network/public/mojom/url_request.mojom-test-utils.h"


#ifndef SERVICES_NETWORK_PUBLIC_MOJOM_URL_REQUEST_MOJOM_JUMBO_H_
#define SERVICES_NETWORK_PUBLIC_MOJOM_URL_REQUEST_MOJOM_JUMBO_H_
#include "services/network/public/mojom/cookie_access_observer.mojom.h"
#include "services/network/public/mojom/devtools_observer.mojom.h"
#endif



namespace network {
namespace mojom {
TrustedUrlRequestParams::TrustedUrlRequestParams()
    : isolation_info(),
      disable_secure_dns(),
      has_user_activation(),
      cookie_observer(),
      url_loader_network_observer(),
      devtools_observer(),
      client_security_state(),
      accept_ch_frame_observer() {}

TrustedUrlRequestParams::TrustedUrlRequestParams(
    const ::net::IsolationInfo& isolation_info_in,
    bool disable_secure_dns_in,
    bool has_user_activation_in,
    ::mojo::PendingRemote<::network::mojom::CookieAccessObserver> cookie_observer_in,
    ::mojo::PendingRemote<::network::mojom::URLLoaderNetworkServiceObserver> url_loader_network_observer_in,
    ::mojo::PendingRemote<::network::mojom::DevToolsObserver> devtools_observer_in,
    ::network::mojom::ClientSecurityStatePtr client_security_state_in,
    ::mojo::PendingRemote<::network::mojom::AcceptCHFrameObserver> accept_ch_frame_observer_in)
    : isolation_info(std::move(isolation_info_in)),
      disable_secure_dns(std::move(disable_secure_dns_in)),
      has_user_activation(std::move(has_user_activation_in)),
      cookie_observer(std::move(cookie_observer_in)),
      url_loader_network_observer(std::move(url_loader_network_observer_in)),
      devtools_observer(std::move(devtools_observer_in)),
      client_security_state(std::move(client_security_state_in)),
      accept_ch_frame_observer(std::move(accept_ch_frame_observer_in)) {}

TrustedUrlRequestParams::~TrustedUrlRequestParams() = default;

void TrustedUrlRequestParams::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "isolation_info"), this->isolation_info,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const ::net::IsolationInfo&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "disable_secure_dns"), this->disable_secure_dns,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "has_user_activation"), this->has_user_activation,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "cookie_observer"), this->cookie_observer,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type ::mojo::PendingRemote<::network::mojom::CookieAccessObserver>>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "url_loader_network_observer"), this->url_loader_network_observer,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type ::mojo::PendingRemote<::network::mojom::URLLoaderNetworkServiceObserver>>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "devtools_observer"), this->devtools_observer,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type ::mojo::PendingRemote<::network::mojom::DevToolsObserver>>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "client_security_state"), this->client_security_state,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type ::network::mojom::ClientSecurityStatePtr>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "accept_ch_frame_observer"), this->accept_ch_frame_observer,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type ::mojo::PendingRemote<::network::mojom::AcceptCHFrameObserver>>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool TrustedUrlRequestParams::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
WebBundleTokenParams::WebBundleTokenParams()
    : bundle_url(),
      token(),
      web_bundle_handle(),
      render_process_id() {}

WebBundleTokenParams::WebBundleTokenParams(
    const ::GURL& bundle_url_in,
    const ::base::UnguessableToken& token_in,
    ::mojo::PendingRemote<::network::mojom::WebBundleHandle> web_bundle_handle_in,
    int32_t render_process_id_in)
    : bundle_url(std::move(bundle_url_in)),
      token(std::move(token_in)),
      web_bundle_handle(std::move(web_bundle_handle_in)),
      render_process_id(std::move(render_process_id_in)) {}

WebBundleTokenParams::~WebBundleTokenParams() = default;

void WebBundleTokenParams::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "bundle_url"), this->bundle_url,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const ::GURL&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "token"), this->token,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const ::base::UnguessableToken&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "web_bundle_handle"), this->web_bundle_handle,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type ::mojo::PendingRemote<::network::mojom::WebBundleHandle>>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "render_process_id"), this->render_process_id,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type int32_t>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool WebBundleTokenParams::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
NetLogSource::NetLogSource()
    : source_type(),
      source_id(),
      start_time() {}

NetLogSource::NetLogSource(
    uint32_t source_type_in,
    uint32_t source_id_in,
    ::base::TimeTicks start_time_in)
    : source_type(std::move(source_type_in)),
      source_id(std::move(source_id_in)),
      start_time(std::move(start_time_in)) {}

NetLogSource::~NetLogSource() = default;

void NetLogSource::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "source_type"), this->source_type,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type uint32_t>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "source_id"), this->source_id,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type uint32_t>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "start_time"), this->start_time,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type ::base::TimeTicks>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool NetLogSource::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
URLRequest::URLRequest()
    : method(),
      url(),
      site_for_cookies(),
      update_first_party_url_on_redirect(),
      request_initiator(),
      navigation_redirect_chain(),
      isolated_world_origin(),
      referrer(),
      referrer_policy(),
      headers(),
      cors_exempt_headers(),
      load_flags(),
      resource_type(),
      priority(),
      cors_preflight_policy(),
      originated_from_service_worker(),
      skip_service_worker(),
      corb_detachable(false),
      mode(),
      credentials_mode(),
      redirect_mode(),
      fetch_integrity(),
      destination(),
      request_body(),
      keepalive(),
      has_user_gesture(),
      enable_load_timing(),
      enable_upload_progress(),
      do_not_prompt_for_login(),
      is_outermost_main_frame(),
      transition_type(),
      previews_state(),
      upgrade_if_insecure(),
      is_revalidating(),
      throttling_profile_id(),
      fetch_window_id(),
      devtools_request_id(),
      devtools_stack_id(),
      is_signed_exchange_prefetch_cache_enabled(),
      is_fetch_like_api(),
      is_favicon(),
      original_destination(),
      trusted_params(),
      recursive_prefetch_token(),
      trust_token_params(),
      web_bundle_token_params(),
      devtools_accepted_stream_types(),
      net_log_create_info(),
      net_log_reference_info(),
      target_ip_address_space() {}

URLRequest::URLRequest(
    const std::string& method_in,
    const ::GURL& url_in,
    const ::net::SiteForCookies& site_for_cookies_in,
    bool update_first_party_url_on_redirect_in,
    const absl::optional<::url::Origin>& request_initiator_in,
    std::vector<::GURL> navigation_redirect_chain_in,
    const absl::optional<::url::Origin>& isolated_world_origin_in,
    const ::GURL& referrer_in,
    ::net::ReferrerPolicy referrer_policy_in,
    const ::net::HttpRequestHeaders& headers_in,
    const ::net::HttpRequestHeaders& cors_exempt_headers_in,
    int32_t load_flags_in,
    int32_t resource_type_in,
    ::net::RequestPriority priority_in,
    ::network::mojom::CorsPreflightPolicy cors_preflight_policy_in,
    bool originated_from_service_worker_in,
    bool skip_service_worker_in,
    bool corb_detachable_in,
    ::network::mojom::RequestMode mode_in,
    ::network::mojom::CredentialsMode credentials_mode_in,
    ::network::mojom::RedirectMode redirect_mode_in,
    const std::string& fetch_integrity_in,
    ::network::mojom::RequestDestination destination_in,
    ::scoped_refptr<::network::ResourceRequestBody> request_body_in,
    bool keepalive_in,
    bool has_user_gesture_in,
    bool enable_load_timing_in,
    bool enable_upload_progress_in,
    bool do_not_prompt_for_login_in,
    bool is_outermost_main_frame_in,
    int32_t transition_type_in,
    int32_t previews_state_in,
    bool upgrade_if_insecure_in,
    bool is_revalidating_in,
    const absl::optional<::base::UnguessableToken>& throttling_profile_id_in,
    const absl::optional<::base::UnguessableToken>& fetch_window_id_in,
    const absl::optional<std::string>& devtools_request_id_in,
    const absl::optional<std::string>& devtools_stack_id_in,
    bool is_signed_exchange_prefetch_cache_enabled_in,
    bool is_fetch_like_api_in,
    bool is_favicon_in,
    ::network::mojom::RequestDestination original_destination_in,
    const absl::optional<::network::ResourceRequest::TrustedParams>& trusted_params_in,
    const absl::optional<::base::UnguessableToken>& recursive_prefetch_token_in,
    ::network::mojom::TrustTokenParamsPtr trust_token_params_in,
    const absl::optional<::network::ResourceRequest::WebBundleTokenParams>& web_bundle_token_params_in,
    absl::optional<std::vector<::net::SourceStream::SourceType>> devtools_accepted_stream_types_in,
    const absl::optional<::net::NetLogSource>& net_log_create_info_in,
    const absl::optional<::net::NetLogSource>& net_log_reference_info_in,
    ::network::mojom::IPAddressSpace target_ip_address_space_in)
    : method(std::move(method_in)),
      url(std::move(url_in)),
      site_for_cookies(std::move(site_for_cookies_in)),
      update_first_party_url_on_redirect(std::move(update_first_party_url_on_redirect_in)),
      request_initiator(std::move(request_initiator_in)),
      navigation_redirect_chain(std::move(navigation_redirect_chain_in)),
      isolated_world_origin(std::move(isolated_world_origin_in)),
      referrer(std::move(referrer_in)),
      referrer_policy(std::move(referrer_policy_in)),
      headers(std::move(headers_in)),
      cors_exempt_headers(std::move(cors_exempt_headers_in)),
      load_flags(std::move(load_flags_in)),
      resource_type(std::move(resource_type_in)),
      priority(std::move(priority_in)),
      cors_preflight_policy(std::move(cors_preflight_policy_in)),
      originated_from_service_worker(std::move(originated_from_service_worker_in)),
      skip_service_worker(std::move(skip_service_worker_in)),
      corb_detachable(std::move(corb_detachable_in)),
      mode(std::move(mode_in)),
      credentials_mode(std::move(credentials_mode_in)),
      redirect_mode(std::move(redirect_mode_in)),
      fetch_integrity(std::move(fetch_integrity_in)),
      destination(std::move(destination_in)),
      request_body(std::move(request_body_in)),
      keepalive(std::move(keepalive_in)),
      has_user_gesture(std::move(has_user_gesture_in)),
      enable_load_timing(std::move(enable_load_timing_in)),
      enable_upload_progress(std::move(enable_upload_progress_in)),
      do_not_prompt_for_login(std::move(do_not_prompt_for_login_in)),
      is_outermost_main_frame(std::move(is_outermost_main_frame_in)),
      transition_type(std::move(transition_type_in)),
      previews_state(std::move(previews_state_in)),
      upgrade_if_insecure(std::move(upgrade_if_insecure_in)),
      is_revalidating(std::move(is_revalidating_in)),
      throttling_profile_id(std::move(throttling_profile_id_in)),
      fetch_window_id(std::move(fetch_window_id_in)),
      devtools_request_id(std::move(devtools_request_id_in)),
      devtools_stack_id(std::move(devtools_stack_id_in)),
      is_signed_exchange_prefetch_cache_enabled(std::move(is_signed_exchange_prefetch_cache_enabled_in)),
      is_fetch_like_api(std::move(is_fetch_like_api_in)),
      is_favicon(std::move(is_favicon_in)),
      original_destination(std::move(original_destination_in)),
      trusted_params(std::move(trusted_params_in)),
      recursive_prefetch_token(std::move(recursive_prefetch_token_in)),
      trust_token_params(std::move(trust_token_params_in)),
      web_bundle_token_params(std::move(web_bundle_token_params_in)),
      devtools_accepted_stream_types(std::move(devtools_accepted_stream_types_in)),
      net_log_create_info(std::move(net_log_create_info_in)),
      net_log_reference_info(std::move(net_log_reference_info_in)),
      target_ip_address_space(std::move(target_ip_address_space_in)) {}

URLRequest::~URLRequest() = default;

void URLRequest::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "method"), this->method,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const std::string&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "url"), this->url,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const ::GURL&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "site_for_cookies"), this->site_for_cookies,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const ::net::SiteForCookies&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "update_first_party_url_on_redirect"), this->update_first_party_url_on_redirect,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "request_initiator"), this->request_initiator,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const absl::optional<::url::Origin>&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "navigation_redirect_chain"), this->navigation_redirect_chain,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const std::vector<::GURL>&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "isolated_world_origin"), this->isolated_world_origin,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const absl::optional<::url::Origin>&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "referrer"), this->referrer,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const ::GURL&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "referrer_policy"), this->referrer_policy,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type ::net::ReferrerPolicy>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "headers"), this->headers,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const ::net::HttpRequestHeaders&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "cors_exempt_headers"), this->cors_exempt_headers,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const ::net::HttpRequestHeaders&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "load_flags"), this->load_flags,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type int32_t>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "resource_type"), this->resource_type,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type int32_t>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "priority"), this->priority,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type ::net::RequestPriority>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "cors_preflight_policy"), this->cors_preflight_policy,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type ::network::mojom::CorsPreflightPolicy>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "originated_from_service_worker"), this->originated_from_service_worker,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "skip_service_worker"), this->skip_service_worker,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "corb_detachable"), this->corb_detachable,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "mode"), this->mode,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type ::network::mojom::RequestMode>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "credentials_mode"), this->credentials_mode,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type ::network::mojom::CredentialsMode>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "redirect_mode"), this->redirect_mode,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type ::network::mojom::RedirectMode>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "fetch_integrity"), this->fetch_integrity,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const std::string&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "destination"), this->destination,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type ::network::mojom::RequestDestination>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "request_body"), this->request_body,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type ::scoped_refptr<::network::ResourceRequestBody>>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "keepalive"), this->keepalive,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "has_user_gesture"), this->has_user_gesture,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "enable_load_timing"), this->enable_load_timing,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "enable_upload_progress"), this->enable_upload_progress,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "do_not_prompt_for_login"), this->do_not_prompt_for_login,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "is_outermost_main_frame"), this->is_outermost_main_frame,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "transition_type"), this->transition_type,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type int32_t>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "previews_state"), this->previews_state,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type int32_t>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "upgrade_if_insecure"), this->upgrade_if_insecure,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "is_revalidating"), this->is_revalidating,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "throttling_profile_id"), this->throttling_profile_id,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const absl::optional<::base::UnguessableToken>&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "fetch_window_id"), this->fetch_window_id,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const absl::optional<::base::UnguessableToken>&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "devtools_request_id"), this->devtools_request_id,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const absl::optional<std::string>&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "devtools_stack_id"), this->devtools_stack_id,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const absl::optional<std::string>&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "is_signed_exchange_prefetch_cache_enabled"), this->is_signed_exchange_prefetch_cache_enabled,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "is_fetch_like_api"), this->is_fetch_like_api,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "is_favicon"), this->is_favicon,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "original_destination"), this->original_destination,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type ::network::mojom::RequestDestination>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "trusted_params"), this->trusted_params,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const absl::optional<::network::ResourceRequest::TrustedParams>&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "recursive_prefetch_token"), this->recursive_prefetch_token,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const absl::optional<::base::UnguessableToken>&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "trust_token_params"), this->trust_token_params,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type ::network::mojom::TrustTokenParamsPtr>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "web_bundle_token_params"), this->web_bundle_token_params,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const absl::optional<::network::ResourceRequest::WebBundleTokenParams>&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "devtools_accepted_stream_types"), this->devtools_accepted_stream_types,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const absl::optional<std::vector<::net::SourceStream::SourceType>>&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "net_log_create_info"), this->net_log_create_info,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const absl::optional<::net::NetLogSource>&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "net_log_reference_info"), this->net_log_reference_info,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const absl::optional<::net::NetLogSource>&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "target_ip_address_space"), this->target_ip_address_space,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type ::network::mojom::IPAddressSpace>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool URLRequest::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
URLRequestBody::URLRequestBody()
    : elements(),
      identifier(),
      contains_sensitive_info(),
      allow_http1_for_streaming_upload() {}

URLRequestBody::URLRequestBody(
    std::vector<::network::DataElement> elements_in,
    uint64_t identifier_in,
    bool contains_sensitive_info_in,
    bool allow_http1_for_streaming_upload_in)
    : elements(std::move(elements_in)),
      identifier(std::move(identifier_in)),
      contains_sensitive_info(std::move(contains_sensitive_info_in)),
      allow_http1_for_streaming_upload(std::move(allow_http1_for_streaming_upload_in)) {}

URLRequestBody::~URLRequestBody() = default;

void URLRequestBody::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "elements"), this->elements,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type std::vector<::network::DataElement>>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "identifier"), this->identifier,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type uint64_t>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "contains_sensitive_info"), this->contains_sensitive_info,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "allow_http1_for_streaming_upload"), this->allow_http1_for_streaming_upload,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool URLRequestBody::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
DataElementBytes::DataElementBytes()
    : data() {}

DataElementBytes::DataElementBytes(
    ::mojo_base::BigBuffer data_in)
    : data(std::move(data_in)) {}

DataElementBytes::~DataElementBytes() = default;

void DataElementBytes::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "data"), this->data,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type ::mojo_base::BigBuffer>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool DataElementBytes::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
DataElementFile::DataElementFile()
    : path(),
      offset(),
      length(),
      expected_modification_time() {}

DataElementFile::DataElementFile(
    const ::base::FilePath& path_in,
    uint64_t offset_in,
    uint64_t length_in,
    ::base::Time expected_modification_time_in)
    : path(std::move(path_in)),
      offset(std::move(offset_in)),
      length(std::move(length_in)),
      expected_modification_time(std::move(expected_modification_time_in)) {}

DataElementFile::~DataElementFile() = default;

void DataElementFile::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "path"), this->path,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const ::base::FilePath&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "offset"), this->offset,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type uint64_t>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "length"), this->length,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type uint64_t>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "expected_modification_time"), this->expected_modification_time,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type ::base::Time>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool DataElementFile::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
DataElementDataPipe::DataElementDataPipe()
    : data_pipe_getter() {}

DataElementDataPipe::DataElementDataPipe(
    ::mojo::PendingRemote<::network::mojom::DataPipeGetter> data_pipe_getter_in)
    : data_pipe_getter(std::move(data_pipe_getter_in)) {}

DataElementDataPipe::~DataElementDataPipe() = default;

void DataElementDataPipe::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "data_pipe_getter"), this->data_pipe_getter,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type ::mojo::PendingRemote<::network::mojom::DataPipeGetter>>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool DataElementDataPipe::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
DataElementChunkedDataPipe::DataElementChunkedDataPipe()
    : data_pipe_getter(),
      read_only_once() {}

DataElementChunkedDataPipe::DataElementChunkedDataPipe(
    ::mojo::PendingRemote<::network::mojom::ChunkedDataPipeGetter> data_pipe_getter_in,
    bool read_only_once_in)
    : data_pipe_getter(std::move(data_pipe_getter_in)),
      read_only_once(std::move(read_only_once_in)) {}

DataElementChunkedDataPipe::~DataElementChunkedDataPipe() = default;

void DataElementChunkedDataPipe::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "data_pipe_getter"), this->data_pipe_getter,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type ::mojo::PendingRemote<::network::mojom::ChunkedDataPipeGetter>>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "read_only_once"), this->read_only_once,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool DataElementChunkedDataPipe::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
DataElement::DataElement() : tag_(Tag::kBytes) {
  data_.bytes = new ::network::DataElementBytes;
}

DataElement::~DataElement() {
  DestroyActive();
}


void DataElement::set_bytes(
    ::network::DataElementBytes bytes) {
  if (tag_ == Tag::kBytes) {
    *(data_.bytes) = std::move(bytes);
  } else {
    DestroyActive();
    tag_ = Tag::kBytes;
    data_.bytes = new ::network::DataElementBytes(
        std::move(bytes));
  }
}
void DataElement::set_file(
    ::network::DataElementFile file) {
  if (tag_ == Tag::kFile) {
    *(data_.file) = std::move(file);
  } else {
    DestroyActive();
    tag_ = Tag::kFile;
    data_.file = new ::network::DataElementFile(
        std::move(file));
  }
}
void DataElement::set_data_pipe(
    ::network::DataElementDataPipe data_pipe) {
  if (tag_ == Tag::kDataPipe) {
    *(data_.data_pipe) = std::move(data_pipe);
  } else {
    DestroyActive();
    tag_ = Tag::kDataPipe;
    data_.data_pipe = new ::network::DataElementDataPipe(
        std::move(data_pipe));
  }
}
void DataElement::set_chunked_data_pipe(
    ::network::DataElementChunkedDataPipe chunked_data_pipe) {
  if (tag_ == Tag::kChunkedDataPipe) {
    *(data_.chunked_data_pipe) = std::move(chunked_data_pipe);
  } else {
    DestroyActive();
    tag_ = Tag::kChunkedDataPipe;
    data_.chunked_data_pipe = new ::network::DataElementChunkedDataPipe(
        std::move(chunked_data_pipe));
  }
}

void DataElement::DestroyActive() {
  switch (tag_) {

    case Tag::kBytes:

      delete data_.bytes;
      break;
    case Tag::kFile:

      delete data_.file;
      break;
    case Tag::kDataPipe:

      delete data_.data_pipe;
      break;
    case Tag::kChunkedDataPipe:

      delete data_.chunked_data_pipe;
      break;
  }
}

bool DataElement::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context, false);
}


}  // namespace mojom
}  // namespace network


namespace mojo {


// static
bool StructTraits<::network::mojom::TrustedUrlRequestParams::DataView, ::network::mojom::TrustedUrlRequestParamsPtr>::Read(
    ::network::mojom::TrustedUrlRequestParams::DataView input,
    ::network::mojom::TrustedUrlRequestParamsPtr* output) {
  bool success = true;
  ::network::mojom::TrustedUrlRequestParamsPtr result(::network::mojom::TrustedUrlRequestParams::New());
  
      if (success && !input.ReadIsolationInfo(&result->isolation_info))
        success = false;
      if (success)
        result->disable_secure_dns = input.disable_secure_dns();
      if (success)
        result->has_user_activation = input.has_user_activation();
      if (success) {
        result->cookie_observer =
            input.TakeCookieObserver<decltype(result->cookie_observer)>();
      }
      if (success) {
        result->url_loader_network_observer =
            input.TakeUrlLoaderNetworkObserver<decltype(result->url_loader_network_observer)>();
      }
      if (success) {
        result->devtools_observer =
            input.TakeDevtoolsObserver<decltype(result->devtools_observer)>();
      }
      if (success && !input.ReadClientSecurityState(&result->client_security_state))
        success = false;
      if (success) {
        result->accept_ch_frame_observer =
            input.TakeAcceptChFrameObserver<decltype(result->accept_ch_frame_observer)>();
      }
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::network::mojom::WebBundleTokenParams::DataView, ::network::mojom::WebBundleTokenParamsPtr>::Read(
    ::network::mojom::WebBundleTokenParams::DataView input,
    ::network::mojom::WebBundleTokenParamsPtr* output) {
  bool success = true;
  ::network::mojom::WebBundleTokenParamsPtr result(::network::mojom::WebBundleTokenParams::New());
  
      if (success && !input.ReadBundleUrl(&result->bundle_url))
        success = false;
      if (success && !input.ReadToken(&result->token))
        success = false;
      if (success) {
        result->web_bundle_handle =
            input.TakeWebBundleHandle<decltype(result->web_bundle_handle)>();
      }
      if (success)
        result->render_process_id = input.render_process_id();
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::network::mojom::NetLogSource::DataView, ::network::mojom::NetLogSourcePtr>::Read(
    ::network::mojom::NetLogSource::DataView input,
    ::network::mojom::NetLogSourcePtr* output) {
  bool success = true;
  ::network::mojom::NetLogSourcePtr result(::network::mojom::NetLogSource::New());
  
      if (success)
        result->source_type = input.source_type();
      if (success)
        result->source_id = input.source_id();
      if (success && !input.ReadStartTime(&result->start_time))
        success = false;
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::network::mojom::URLRequest::DataView, ::network::mojom::URLRequestPtr>::Read(
    ::network::mojom::URLRequest::DataView input,
    ::network::mojom::URLRequestPtr* output) {
  bool success = true;
  ::network::mojom::URLRequestPtr result(::network::mojom::URLRequest::New());
  
      if (success && !input.ReadMethod(&result->method))
        success = false;
      if (success && !input.ReadUrl(&result->url))
        success = false;
      if (success && !input.ReadSiteForCookies(&result->site_for_cookies))
        success = false;
      if (success)
        result->update_first_party_url_on_redirect = input.update_first_party_url_on_redirect();
      if (success && !input.ReadRequestInitiator(&result->request_initiator))
        success = false;
      if (success && !input.ReadNavigationRedirectChain(&result->navigation_redirect_chain))
        success = false;
      if (success && !input.ReadIsolatedWorldOrigin(&result->isolated_world_origin))
        success = false;
      if (success && !input.ReadReferrer(&result->referrer))
        success = false;
      if (success && !input.ReadReferrerPolicy(&result->referrer_policy))
        success = false;
      if (success && !input.ReadHeaders(&result->headers))
        success = false;
      if (success && !input.ReadCorsExemptHeaders(&result->cors_exempt_headers))
        success = false;
      if (success)
        result->load_flags = input.load_flags();
      if (success)
        result->resource_type = input.resource_type();
      if (success && !input.ReadPriority(&result->priority))
        success = false;
      if (success && !input.ReadCorsPreflightPolicy(&result->cors_preflight_policy))
        success = false;
      if (success)
        result->originated_from_service_worker = input.originated_from_service_worker();
      if (success)
        result->skip_service_worker = input.skip_service_worker();
      if (success)
        result->corb_detachable = input.corb_detachable();
      if (success && !input.ReadMode(&result->mode))
        success = false;
      if (success && !input.ReadCredentialsMode(&result->credentials_mode))
        success = false;
      if (success && !input.ReadRedirectMode(&result->redirect_mode))
        success = false;
      if (success && !input.ReadFetchIntegrity(&result->fetch_integrity))
        success = false;
      if (success && !input.ReadDestination(&result->destination))
        success = false;
      if (success && !input.ReadRequestBody(&result->request_body))
        success = false;
      if (success)
        result->keepalive = input.keepalive();
      if (success)
        result->has_user_gesture = input.has_user_gesture();
      if (success)
        result->enable_load_timing = input.enable_load_timing();
      if (success)
        result->enable_upload_progress = input.enable_upload_progress();
      if (success)
        result->do_not_prompt_for_login = input.do_not_prompt_for_login();
      if (success)
        result->is_outermost_main_frame = input.is_outermost_main_frame();
      if (success)
        result->transition_type = input.transition_type();
      if (success)
        result->previews_state = input.previews_state();
      if (success)
        result->upgrade_if_insecure = input.upgrade_if_insecure();
      if (success)
        result->is_revalidating = input.is_revalidating();
      if (success && !input.ReadThrottlingProfileId(&result->throttling_profile_id))
        success = false;
      if (success && !input.ReadFetchWindowId(&result->fetch_window_id))
        success = false;
      if (success && !input.ReadDevtoolsRequestId(&result->devtools_request_id))
        success = false;
      if (success && !input.ReadDevtoolsStackId(&result->devtools_stack_id))
        success = false;
      if (success)
        result->is_signed_exchange_prefetch_cache_enabled = input.is_signed_exchange_prefetch_cache_enabled();
      if (success)
        result->is_fetch_like_api = input.is_fetch_like_api();
      if (success)
        result->is_favicon = input.is_favicon();
      if (success && !input.ReadOriginalDestination(&result->original_destination))
        success = false;
      if (success && !input.ReadTrustedParams(&result->trusted_params))
        success = false;
      if (success && !input.ReadRecursivePrefetchToken(&result->recursive_prefetch_token))
        success = false;
      if (success && !input.ReadTrustTokenParams(&result->trust_token_params))
        success = false;
      if (success && !input.ReadWebBundleTokenParams(&result->web_bundle_token_params))
        success = false;
      if (success && !input.ReadDevtoolsAcceptedStreamTypes(&result->devtools_accepted_stream_types))
        success = false;
      if (success && !input.ReadNetLogCreateInfo(&result->net_log_create_info))
        success = false;
      if (success && !input.ReadNetLogReferenceInfo(&result->net_log_reference_info))
        success = false;
      if (success && !input.ReadTargetIpAddressSpace(&result->target_ip_address_space))
        success = false;
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::network::mojom::URLRequestBody::DataView, ::network::mojom::URLRequestBodyPtr>::Read(
    ::network::mojom::URLRequestBody::DataView input,
    ::network::mojom::URLRequestBodyPtr* output) {
  bool success = true;
  ::network::mojom::URLRequestBodyPtr result(::network::mojom::URLRequestBody::New());
  
      if (success && !input.ReadElements(&result->elements))
        success = false;
      if (success)
        result->identifier = input.identifier();
      if (success)
        result->contains_sensitive_info = input.contains_sensitive_info();
      if (success)
        result->allow_http1_for_streaming_upload = input.allow_http1_for_streaming_upload();
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::network::mojom::DataElementBytes::DataView, ::network::mojom::DataElementBytesPtr>::Read(
    ::network::mojom::DataElementBytes::DataView input,
    ::network::mojom::DataElementBytesPtr* output) {
  bool success = true;
  ::network::mojom::DataElementBytesPtr result(::network::mojom::DataElementBytes::New());
  
      if (success && !input.ReadData(&result->data))
        success = false;
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::network::mojom::DataElementFile::DataView, ::network::mojom::DataElementFilePtr>::Read(
    ::network::mojom::DataElementFile::DataView input,
    ::network::mojom::DataElementFilePtr* output) {
  bool success = true;
  ::network::mojom::DataElementFilePtr result(::network::mojom::DataElementFile::New());
  
      if (success && !input.ReadPath(&result->path))
        success = false;
      if (success)
        result->offset = input.offset();
      if (success)
        result->length = input.length();
      if (success && !input.ReadExpectedModificationTime(&result->expected_modification_time))
        success = false;
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::network::mojom::DataElementDataPipe::DataView, ::network::mojom::DataElementDataPipePtr>::Read(
    ::network::mojom::DataElementDataPipe::DataView input,
    ::network::mojom::DataElementDataPipePtr* output) {
  bool success = true;
  ::network::mojom::DataElementDataPipePtr result(::network::mojom::DataElementDataPipe::New());
  
      if (success) {
        result->data_pipe_getter =
            input.TakeDataPipeGetter<decltype(result->data_pipe_getter)>();
      }
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::network::mojom::DataElementChunkedDataPipe::DataView, ::network::mojom::DataElementChunkedDataPipePtr>::Read(
    ::network::mojom::DataElementChunkedDataPipe::DataView input,
    ::network::mojom::DataElementChunkedDataPipePtr* output) {
  bool success = true;
  ::network::mojom::DataElementChunkedDataPipePtr result(::network::mojom::DataElementChunkedDataPipe::New());
  
      if (success) {
        result->data_pipe_getter =
            input.TakeDataPipeGetter<decltype(result->data_pipe_getter)>();
      }
      if (success)
        result->read_only_once = input.read_only_once();
  *output = std::move(result);
  return success;
}

// static
bool UnionTraits<::network::mojom::DataElement::DataView, ::network::mojom::DataElementPtr>::Read(
    ::network::mojom::DataElement::DataView input,
    ::network::mojom::DataElementPtr* output) {
  using UnionType = ::network::mojom::DataElement;
  using Tag = UnionType::Tag;

  switch (input.tag()) {
    case Tag::kBytes: {
      ::network::DataElementBytes result_bytes;
      if (!input.ReadBytes(&result_bytes))
        return false;

      *output = UnionType::NewBytes(
          std::move(result_bytes));
      break;
    }
    case Tag::kFile: {
      ::network::DataElementFile result_file;
      if (!input.ReadFile(&result_file))
        return false;

      *output = UnionType::NewFile(
          std::move(result_file));
      break;
    }
    case Tag::kDataPipe: {
      ::network::DataElementDataPipe result_data_pipe;
      if (!input.ReadDataPipe(&result_data_pipe))
        return false;

      *output = UnionType::NewDataPipe(
          std::move(result_data_pipe));
      break;
    }
    case Tag::kChunkedDataPipe: {
      ::network::DataElementChunkedDataPipe result_chunked_data_pipe;
      if (!input.ReadChunkedDataPipe(&result_chunked_data_pipe))
        return false;

      *output = UnionType::NewChunkedDataPipe(
          std::move(result_chunked_data_pipe));
      break;
    }
    default:

      return false;
  }
  return true;
}

}  // namespace mojo


// Symbols declared in the -test-utils.h header are defined here instead of a
// separate .cc file to save compile time.


namespace network {
namespace mojom {




}  // namespace mojom
}  // namespace network


#if defined(__clang__)
#pragma clang diagnostic pop
#endif