// services/network/public/mojom/reporting_service.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef SERVICES_NETWORK_PUBLIC_MOJOM_REPORTING_SERVICE_MOJOM_PARAMS_DATA_H_
#define SERVICES_NETWORK_PUBLIC_MOJOM_REPORTING_SERVICE_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace network {
namespace mojom {
namespace internal {

class ValidationContext;
class  ReportingApiObserver_OnReportAdded_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::ReportingApiReport_Data> report;

 private:
  friend class mojo::internal::MessageFragment<ReportingApiObserver_OnReportAdded_Params_Data>;

  ReportingApiObserver_OnReportAdded_Params_Data();
  ~ReportingApiObserver_OnReportAdded_Params_Data() = delete;
};
static_assert(sizeof(ReportingApiObserver_OnReportAdded_Params_Data) == 16,
              "Bad sizeof(ReportingApiObserver_OnReportAdded_Params_Data)");
class  ReportingApiObserver_OnReportUpdated_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::ReportingApiReport_Data> report;

 private:
  friend class mojo::internal::MessageFragment<ReportingApiObserver_OnReportUpdated_Params_Data>;

  ReportingApiObserver_OnReportUpdated_Params_Data();
  ~ReportingApiObserver_OnReportUpdated_Params_Data() = delete;
};
static_assert(sizeof(ReportingApiObserver_OnReportUpdated_Params_Data) == 16,
              "Bad sizeof(ReportingApiObserver_OnReportUpdated_Params_Data)");
class  ReportingApiObserver_OnEndpointsUpdatedForOrigin_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<internal::ReportingApiEndpoint_Data>>> endpoints;

 private:
  friend class mojo::internal::MessageFragment<ReportingApiObserver_OnEndpointsUpdatedForOrigin_Params_Data>;

  ReportingApiObserver_OnEndpointsUpdatedForOrigin_Params_Data();
  ~ReportingApiObserver_OnEndpointsUpdatedForOrigin_Params_Data() = delete;
};
static_assert(sizeof(ReportingApiObserver_OnEndpointsUpdatedForOrigin_Params_Data) == 16,
              "Bad sizeof(ReportingApiObserver_OnEndpointsUpdatedForOrigin_Params_Data)");

}  // namespace internal


class ReportingApiObserver_OnReportAdded_ParamsDataView {
 public:
  ReportingApiObserver_OnReportAdded_ParamsDataView() = default;

  ReportingApiObserver_OnReportAdded_ParamsDataView(
      internal::ReportingApiObserver_OnReportAdded_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetReportDataView(
      ReportingApiReportDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadReport(UserType* output) {
    
    auto* pointer = data_->report.Get();
    return mojo::internal::Deserialize<::network::mojom::ReportingApiReportDataView>(
        pointer, output, message_);
  }
 private:
  internal::ReportingApiObserver_OnReportAdded_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class ReportingApiObserver_OnReportUpdated_ParamsDataView {
 public:
  ReportingApiObserver_OnReportUpdated_ParamsDataView() = default;

  ReportingApiObserver_OnReportUpdated_ParamsDataView(
      internal::ReportingApiObserver_OnReportUpdated_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetReportDataView(
      ReportingApiReportDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadReport(UserType* output) {
    
    auto* pointer = data_->report.Get();
    return mojo::internal::Deserialize<::network::mojom::ReportingApiReportDataView>(
        pointer, output, message_);
  }
 private:
  internal::ReportingApiObserver_OnReportUpdated_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class ReportingApiObserver_OnEndpointsUpdatedForOrigin_ParamsDataView {
 public:
  ReportingApiObserver_OnEndpointsUpdatedForOrigin_ParamsDataView() = default;

  ReportingApiObserver_OnEndpointsUpdatedForOrigin_ParamsDataView(
      internal::ReportingApiObserver_OnEndpointsUpdatedForOrigin_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetEndpointsDataView(
      mojo::ArrayDataView<ReportingApiEndpointDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadEndpoints(UserType* output) {
    
    auto* pointer = data_->endpoints.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::network::mojom::ReportingApiEndpointDataView>>(
        pointer, output, message_);
  }
 private:
  internal::ReportingApiObserver_OnEndpointsUpdatedForOrigin_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};


inline void ReportingApiObserver_OnReportAdded_ParamsDataView::GetReportDataView(
    ReportingApiReportDataView* output) {
  auto pointer = data_->report.Get();
  *output = ReportingApiReportDataView(pointer, message_);
}


inline void ReportingApiObserver_OnReportUpdated_ParamsDataView::GetReportDataView(
    ReportingApiReportDataView* output) {
  auto pointer = data_->report.Get();
  *output = ReportingApiReportDataView(pointer, message_);
}


inline void ReportingApiObserver_OnEndpointsUpdatedForOrigin_ParamsDataView::GetEndpointsDataView(
    mojo::ArrayDataView<ReportingApiEndpointDataView>* output) {
  auto pointer = data_->endpoints.Get();
  *output = mojo::ArrayDataView<ReportingApiEndpointDataView>(pointer, message_);
}

}  // namespace mojom
}  // namespace network

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // SERVICES_NETWORK_PUBLIC_MOJOM_REPORTING_SERVICE_MOJOM_PARAMS_DATA_H_