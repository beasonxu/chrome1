// services/network/public/mojom/network_change_manager.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef SERVICES_NETWORK_PUBLIC_MOJOM_NETWORK_CHANGE_MANAGER_MOJOM_PARAMS_DATA_H_
#define SERVICES_NETWORK_PUBLIC_MOJOM_NETWORK_CHANGE_MANAGER_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace network {
namespace mojom {
namespace internal {

class ValidationContext;
class  NetworkChangeManagerClient_OnInitialConnectionType_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t type;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<NetworkChangeManagerClient_OnInitialConnectionType_Params_Data>;

  NetworkChangeManagerClient_OnInitialConnectionType_Params_Data();
  ~NetworkChangeManagerClient_OnInitialConnectionType_Params_Data() = delete;
};
static_assert(sizeof(NetworkChangeManagerClient_OnInitialConnectionType_Params_Data) == 16,
              "Bad sizeof(NetworkChangeManagerClient_OnInitialConnectionType_Params_Data)");
class  NetworkChangeManagerClient_OnNetworkChanged_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t type;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<NetworkChangeManagerClient_OnNetworkChanged_Params_Data>;

  NetworkChangeManagerClient_OnNetworkChanged_Params_Data();
  ~NetworkChangeManagerClient_OnNetworkChanged_Params_Data() = delete;
};
static_assert(sizeof(NetworkChangeManagerClient_OnNetworkChanged_Params_Data) == 16,
              "Bad sizeof(NetworkChangeManagerClient_OnNetworkChanged_Params_Data)");
class  NetworkChangeManager_RequestNotifications_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Interface_Data client_remote;

 private:
  friend class mojo::internal::MessageFragment<NetworkChangeManager_RequestNotifications_Params_Data>;

  NetworkChangeManager_RequestNotifications_Params_Data();
  ~NetworkChangeManager_RequestNotifications_Params_Data() = delete;
};
static_assert(sizeof(NetworkChangeManager_RequestNotifications_Params_Data) == 16,
              "Bad sizeof(NetworkChangeManager_RequestNotifications_Params_Data)");
class  NetworkChangeManager_OnNetworkChanged_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t dns_changed : 1;
  uint8_t ip_address_changed : 1;
  uint8_t connection_type_changed : 1;
  uint8_t connection_subtype_changed : 1;
  uint8_t pad3_[3];
  int32_t new_connection_type;
  int32_t new_connection_subtype;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<NetworkChangeManager_OnNetworkChanged_Params_Data>;

  NetworkChangeManager_OnNetworkChanged_Params_Data();
  ~NetworkChangeManager_OnNetworkChanged_Params_Data() = delete;
};
static_assert(sizeof(NetworkChangeManager_OnNetworkChanged_Params_Data) == 24,
              "Bad sizeof(NetworkChangeManager_OnNetworkChanged_Params_Data)");

}  // namespace internal


class NetworkChangeManagerClient_OnInitialConnectionType_ParamsDataView {
 public:
  NetworkChangeManagerClient_OnInitialConnectionType_ParamsDataView() = default;

  NetworkChangeManagerClient_OnInitialConnectionType_ParamsDataView(
      internal::NetworkChangeManagerClient_OnInitialConnectionType_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadType(UserType* output) const {
    auto data_value = data_->type;
    return mojo::internal::Deserialize<::network::mojom::ConnectionType>(
        data_value, output);
  }
  ConnectionType type() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::network::mojom::ConnectionType>(data_->type));
  }
 private:
  internal::NetworkChangeManagerClient_OnInitialConnectionType_Params_Data* data_ = nullptr;
};



class NetworkChangeManagerClient_OnNetworkChanged_ParamsDataView {
 public:
  NetworkChangeManagerClient_OnNetworkChanged_ParamsDataView() = default;

  NetworkChangeManagerClient_OnNetworkChanged_ParamsDataView(
      internal::NetworkChangeManagerClient_OnNetworkChanged_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadType(UserType* output) const {
    auto data_value = data_->type;
    return mojo::internal::Deserialize<::network::mojom::ConnectionType>(
        data_value, output);
  }
  ConnectionType type() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::network::mojom::ConnectionType>(data_->type));
  }
 private:
  internal::NetworkChangeManagerClient_OnNetworkChanged_Params_Data* data_ = nullptr;
};



class NetworkChangeManager_RequestNotifications_ParamsDataView {
 public:
  NetworkChangeManager_RequestNotifications_ParamsDataView() = default;

  NetworkChangeManager_RequestNotifications_ParamsDataView(
      internal::NetworkChangeManager_RequestNotifications_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeClientRemote() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::network::mojom::NetworkChangeManagerClientInterfaceBase>>(
            &data_->client_remote, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::NetworkChangeManager_RequestNotifications_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class NetworkChangeManager_OnNetworkChanged_ParamsDataView {
 public:
  NetworkChangeManager_OnNetworkChanged_ParamsDataView() = default;

  NetworkChangeManager_OnNetworkChanged_ParamsDataView(
      internal::NetworkChangeManager_OnNetworkChanged_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool dns_changed() const {
    return data_->dns_changed;
  }
  bool ip_address_changed() const {
    return data_->ip_address_changed;
  }
  bool connection_type_changed() const {
    return data_->connection_type_changed;
  }
  template <typename UserType>
  [[nodiscard]] bool ReadNewConnectionType(UserType* output) const {
    auto data_value = data_->new_connection_type;
    return mojo::internal::Deserialize<::network::mojom::ConnectionType>(
        data_value, output);
  }
  ConnectionType new_connection_type() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::network::mojom::ConnectionType>(data_->new_connection_type));
  }
  bool connection_subtype_changed() const {
    return data_->connection_subtype_changed;
  }
  template <typename UserType>
  [[nodiscard]] bool ReadNewConnectionSubtype(UserType* output) const {
    auto data_value = data_->new_connection_subtype;
    return mojo::internal::Deserialize<::network::mojom::ConnectionSubtype>(
        data_value, output);
  }
  ConnectionSubtype new_connection_subtype() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::network::mojom::ConnectionSubtype>(data_->new_connection_subtype));
  }
 private:
  internal::NetworkChangeManager_OnNetworkChanged_Params_Data* data_ = nullptr;
};









}  // namespace mojom
}  // namespace network

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // SERVICES_NETWORK_PUBLIC_MOJOM_NETWORK_CHANGE_MANAGER_MOJOM_PARAMS_DATA_H_