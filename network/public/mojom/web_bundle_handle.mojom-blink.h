// services/network/public/mojom/web_bundle_handle.mojom-blink.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef SERVICES_NETWORK_PUBLIC_MOJOM_WEB_BUNDLE_HANDLE_MOJOM_BLINK_H_
#define SERVICES_NETWORK_PUBLIC_MOJOM_WEB_BUNDLE_HANDLE_MOJOM_BLINK_H_

#include <stdint.h>

#include <limits>
#include <type_traits>
#include <utility>

#include "third_party/abseil-cpp/absl/types/optional.h"
#include "mojo/public/cpp/bindings/clone_traits.h"
#include "mojo/public/cpp/bindings/equals_traits.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/bindings/struct_traits.h"
#include "mojo/public/cpp/bindings/union_traits.h"

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "services/network/public/mojom/web_bundle_handle.mojom-shared.h"
#include "services/network/public/mojom/web_bundle_handle.mojom-blink-forward.h"

#include "mojo/public/cpp/bindings/lib/wtf_clone_equals_util.h"
#include "mojo/public/cpp/bindings/lib/wtf_hash_util.h"
#include "third_party/blink/renderer/platform/wtf/hash_functions.h"
#include "third_party/blink/renderer/platform/wtf/text/wtf_string.h"

#include "mojo/public/cpp/bindings/lib/control_message_handler.h"
#include "mojo/public/cpp/bindings/raw_ptr_impl_ref_traits.h"


#include "third_party/blink/public/platform/web_common.h"




namespace WTF {
struct network_mojom_internal_WebBundleErrorType_DataHashFn {
  static unsigned GetHash(const ::network::mojom::WebBundleErrorType& value) {
    using utype = std::underlying_type<::network::mojom::WebBundleErrorType>::type;
    return DefaultHash<utype>::Hash().GetHash(static_cast<utype>(value));
  }
  static bool Equal(const ::network::mojom::WebBundleErrorType& left, const ::network::mojom::WebBundleErrorType& right) {
    return left == right;
  }
  static const bool safe_to_compare_to_empty_or_deleted = true;
};

template <>
struct HashTraits<::network::mojom::WebBundleErrorType>
    : public GenericHashTraits<::network::mojom::WebBundleErrorType> {
  static_assert(true,
                "-1000000 is a reserved enum value");
  static_assert(true,
                "-1000001 is a reserved enum value");
  static const bool kEmptyValueIsZero = false;
  static ::network::mojom::WebBundleErrorType EmptyValue() { return static_cast<::network::mojom::WebBundleErrorType>(-1000000); }
  static void ConstructDeletedValue(::network::mojom::WebBundleErrorType& slot, bool) {
    slot = static_cast<::network::mojom::WebBundleErrorType>(-1000001);
  }
  static bool IsDeletedValue(const ::network::mojom::WebBundleErrorType& value) {
    return value == static_cast<::network::mojom::WebBundleErrorType>(-1000001);
  }
};
}  // namespace WTF


namespace network {
namespace mojom {
namespace blink {

class WebBundleHandleProxy;

template <typename ImplRefTraits>
class WebBundleHandleStub;

class WebBundleHandleRequestValidator;


class BLINK_PLATFORM_EXPORT WebBundleHandle
    : public WebBundleHandleInterfaceBase {
 public:
  using IPCStableHashFunction = uint32_t(*)();

  static const char Name_[];
  static IPCStableHashFunction MessageToMethodInfo_(mojo::Message& message);
  static const char* MessageToMethodName_(mojo::Message& message);
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = false;
  static constexpr bool HasSyncMethods_ = false;
  static constexpr bool HasUninterruptableMethods_ = false;

  using Base_ = WebBundleHandleInterfaceBase;
  using Proxy_ = WebBundleHandleProxy;

  template <typename ImplRefTraits>
  using Stub_ = WebBundleHandleStub<ImplRefTraits>;

  using RequestValidator_ = WebBundleHandleRequestValidator;
  using ResponseValidator_ = mojo::PassThroughFilter;
  enum MethodMinVersions : uint32_t {
    kCloneMinVersion = 0,
    kOnWebBundleErrorMinVersion = 0,
    kOnWebBundleLoadFinishedMinVersion = 0,
  };

// crbug.com/1340245 - this causes binary size bloat on Fuchsia, and we're OK
// with not having this data in traces there.
#if !BUILDFLAG(IS_FUCHSIA)
  struct Clone_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct OnWebBundleError_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct OnWebBundleLoadFinished_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
#endif // !BUILDFLAG(IS_FUCHSIA)
  virtual ~WebBundleHandle() = default;

  
  virtual void Clone(::mojo::PendingReceiver<WebBundleHandle> receiver) = 0;

  
  virtual void OnWebBundleError(WebBundleErrorType type, const WTF::String& message) = 0;

  
  virtual void OnWebBundleLoadFinished(bool success) = 0;
};



class BLINK_PLATFORM_EXPORT WebBundleHandleProxy
    : public WebBundleHandle {
 public:
  using InterfaceType = WebBundleHandle;

  explicit WebBundleHandleProxy(mojo::MessageReceiverWithResponder* receiver);
  
  void Clone(::mojo::PendingReceiver<WebBundleHandle> receiver) final;
  
  void OnWebBundleError(WebBundleErrorType type, const WTF::String& message) final;
  
  void OnWebBundleLoadFinished(bool success) final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};
class BLINK_PLATFORM_EXPORT WebBundleHandleStubDispatch {
 public:
  static bool Accept(WebBundleHandle* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      WebBundleHandle* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<WebBundleHandle>>
class WebBundleHandleStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  WebBundleHandleStub() = default;
  ~WebBundleHandleStub() override = default;

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return WebBundleHandleStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return WebBundleHandleStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class BLINK_PLATFORM_EXPORT WebBundleHandleRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};





}  // namespace blink
}  // namespace mojom
}  // namespace network

namespace mojo {

}  // namespace mojo

#endif  // SERVICES_NETWORK_PUBLIC_MOJOM_WEB_BUNDLE_HANDLE_MOJOM_BLINK_H_