// services/network/public/mojom/net_log.mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef SERVICES_NETWORK_PUBLIC_MOJOM_NET_LOG_MOJOM_SHARED_H_
#define SERVICES_NETWORK_PUBLIC_MOJOM_NET_LOG_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <iosfwd>
#include <type_traits>
#include <utility>
#include "mojo/public/cpp/bindings/array_data_view.h"
#include "mojo/public/cpp/bindings/enum_traits.h"
#include "mojo/public/cpp/bindings/interface_data_view.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/map_data_view.h"
#include "mojo/public/cpp/bindings/string_data_view.h"

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "services/network/public/mojom/net_log.mojom-shared-internal.h"
#include "mojo/public/mojom/base/file.mojom-shared.h"
#include "mojo/public/mojom/base/time.mojom-shared.h"
#include "mojo/public/mojom/base/values.mojom-shared.h"
#include "mojo/public/cpp/bindings/lib/interface_serialization.h"






namespace network {
namespace mojom {


}  // namespace mojom
}  // namespace network

namespace mojo {
namespace internal {

}  // namespace internal
}  // namespace mojo


namespace network {
namespace mojom {


enum class NetLogCaptureMode : int32_t {
  
  DEFAULT = 0,
  
  INCLUDE_PRIVACY_INFO = 1,
  
  EVERYTHING = 2,
  kMinValue = 0,
  kMaxValue = 2,
};

 std::ostream& operator<<(std::ostream& os, NetLogCaptureMode value);
inline bool IsKnownEnumValue(NetLogCaptureMode value) {
  return internal::NetLogCaptureMode_Data::IsKnownValue(
      static_cast<int32_t>(value));
}


enum class NetLogEventPhase : int32_t {
  
  BEGIN = 0,
  
  END = 1,
  
  NONE = 2,
  kMinValue = 0,
  kMaxValue = 2,
};

 std::ostream& operator<<(std::ostream& os, NetLogEventPhase value);
inline bool IsKnownEnumValue(NetLogEventPhase value) {
  return internal::NetLogEventPhase_Data::IsKnownValue(
      static_cast<int32_t>(value));
}
// Interface base classes. They are used for type safety check.
class NetLogExporterInterfaceBase {};

using NetLogExporterPtrDataView =
    mojo::InterfacePtrDataView<NetLogExporterInterfaceBase>;
using NetLogExporterRequestDataView =
    mojo::InterfaceRequestDataView<NetLogExporterInterfaceBase>;
using NetLogExporterAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<NetLogExporterInterfaceBase>;
using NetLogExporterAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<NetLogExporterInterfaceBase>;
class NetLogProxySourceInterfaceBase {};

using NetLogProxySourcePtrDataView =
    mojo::InterfacePtrDataView<NetLogProxySourceInterfaceBase>;
using NetLogProxySourceRequestDataView =
    mojo::InterfaceRequestDataView<NetLogProxySourceInterfaceBase>;
using NetLogProxySourceAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<NetLogProxySourceInterfaceBase>;
using NetLogProxySourceAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<NetLogProxySourceInterfaceBase>;
class NetLogProxySinkInterfaceBase {};

using NetLogProxySinkPtrDataView =
    mojo::InterfacePtrDataView<NetLogProxySinkInterfaceBase>;
using NetLogProxySinkRequestDataView =
    mojo::InterfaceRequestDataView<NetLogProxySinkInterfaceBase>;
using NetLogProxySinkAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<NetLogProxySinkInterfaceBase>;
using NetLogProxySinkAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<NetLogProxySinkInterfaceBase>;


}  // namespace mojom
}  // namespace network

namespace std {

template <>
struct hash<::network::mojom::NetLogCaptureMode>
    : public mojo::internal::EnumHashImpl<::network::mojom::NetLogCaptureMode> {};

template <>
struct hash<::network::mojom::NetLogEventPhase>
    : public mojo::internal::EnumHashImpl<::network::mojom::NetLogEventPhase> {};

}  // namespace std

namespace mojo {


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::network::mojom::NetLogCaptureMode, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::network::mojom::NetLogCaptureMode, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(::mojo::internal::ToKnownEnumValueHelper(
        static_cast<::network::mojom::NetLogCaptureMode>(input)), output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::network::mojom::NetLogEventPhase, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::network::mojom::NetLogEventPhase, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(::mojo::internal::ToKnownEnumValueHelper(
        static_cast<::network::mojom::NetLogEventPhase>(input)), output);
  }
};

}  // namespace internal

}  // namespace mojo


namespace network {
namespace mojom {


}  // namespace mojom
}  // namespace network

// Declare TraceFormatTraits for enums, which should be defined in ::perfetto
// namespace.

namespace perfetto {

template <>
struct  TraceFormatTraits<::network::mojom::NetLogCaptureMode> {
 static void WriteIntoTrace(perfetto::TracedValue context, ::network::mojom::NetLogCaptureMode value);
};

} // namespace perfetto

namespace perfetto {

template <>
struct  TraceFormatTraits<::network::mojom::NetLogEventPhase> {
 static void WriteIntoTrace(perfetto::TracedValue context, ::network::mojom::NetLogEventPhase value);
};

} // namespace perfetto

#endif  // SERVICES_NETWORK_PUBLIC_MOJOM_NET_LOG_MOJOM_SHARED_H_