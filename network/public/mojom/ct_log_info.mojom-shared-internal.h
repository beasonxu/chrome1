// services/network/public/mojom/ct_log_info.mojom-shared-internal.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef SERVICES_NETWORK_PUBLIC_MOJOM_CT_LOG_INFO_MOJOM_SHARED_INTERNAL_H_
#define SERVICES_NETWORK_PUBLIC_MOJOM_CT_LOG_INFO_MOJOM_SHARED_INTERNAL_H_
#include "mojo/public/cpp/bindings/lib/array_internal.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "mojo/public/mojom/base/time.mojom-shared-internal.h"
#include "mojo/public/cpp/bindings/lib/native_enum_data.h"
#include "mojo/public/interfaces/bindings/native_struct.mojom-shared-internal.h"



namespace mojo {
namespace internal {
class ValidationContext;
}
}
namespace network {
namespace mojom {
namespace internal {
class PreviousOperatorEntry_Data;
class CTLogInfo_Data;

#pragma pack(push, 1)
class  PreviousOperatorEntry_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> name;
  mojo::internal::Pointer<::mojo_base::mojom::internal::Time_Data> end_time;

 private:
  friend class mojo::internal::MessageFragment<PreviousOperatorEntry_Data>;

  PreviousOperatorEntry_Data();
  ~PreviousOperatorEntry_Data() = delete;
};
static_assert(sizeof(PreviousOperatorEntry_Data) == 24,
              "Bad sizeof(PreviousOperatorEntry_Data)");
// Used by PreviousOperatorEntry::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct PreviousOperatorEntry_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  PreviousOperatorEntry_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~PreviousOperatorEntry_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<PreviousOperatorEntry_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    PreviousOperatorEntry_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  CTLogInfo_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> id;
  mojo::internal::Pointer<mojo::internal::String_Data> public_key;
  mojo::internal::Pointer<mojo::internal::String_Data> name;
  uint8_t operated_by_google : 1;
  uint8_t pad3_[7];
  mojo::internal::Pointer<::mojo_base::mojom::internal::Time_Data> disqualified_at;
  mojo::internal::Pointer<::mojo_base::mojom::internal::TimeDelta_Data> mmd;
  mojo::internal::Pointer<mojo::internal::String_Data> current_operator;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<internal::PreviousOperatorEntry_Data>>> previous_operators;

 private:
  friend class mojo::internal::MessageFragment<CTLogInfo_Data>;

  CTLogInfo_Data();
  ~CTLogInfo_Data() = delete;
};
static_assert(sizeof(CTLogInfo_Data) == 72,
              "Bad sizeof(CTLogInfo_Data)");
// Used by CTLogInfo::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct CTLogInfo_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  CTLogInfo_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~CTLogInfo_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<CTLogInfo_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    CTLogInfo_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};

#pragma pack(pop)

}  // namespace internal
}  // namespace mojom
}  // namespace network

#endif  // SERVICES_NETWORK_PUBLIC_MOJOM_CT_LOG_INFO_MOJOM_SHARED_INTERNAL_H_