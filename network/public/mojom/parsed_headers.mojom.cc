// services/network/public/mojom/parsed_headers.mojom.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "services/network/public/mojom/parsed_headers.mojom.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/debug/alias.h"
#include "base/hash/md5_constexpr.h"
#include "base/run_loop.h"
#include "base/strings/string_number_conversions.h"
#include "base/trace_event/trace_event.h"
#include "base/trace_event/typed_macros.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/send_message_helper.h"
#include "mojo/public/cpp/bindings/lib/proxy_to_responder.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/mojo_buildflags.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "services/network/public/mojom/parsed_headers.mojom-params-data.h"
#include "services/network/public/mojom/parsed_headers.mojom-shared-message-ids.h"

#include "services/network/public/mojom/parsed_headers.mojom-import-headers.h"
#include "services/network/public/mojom/parsed_headers.mojom-test-utils.h"


#ifndef SERVICES_NETWORK_PUBLIC_MOJOM_PARSED_HEADERS_MOJOM_JUMBO_H_
#define SERVICES_NETWORK_PUBLIC_MOJOM_PARSED_HEADERS_MOJOM_JUMBO_H_
#endif



namespace network {
namespace mojom {
ParsedHeaders::ParsedHeaders()
    : content_security_policy(),
      allow_csp_from(),
      cross_origin_embedder_policy(),
      cross_origin_opener_policy(),
      origin_agent_cluster(),
      accept_ch(),
      critical_ch(),
      xfo(::network::mojom::XFrameOptionsValue::kNone),
      link_headers(),
      timing_allow_origin(),
      bfcache_opt_in_unload(false),
      reporting_endpoints(),
      variants_headers(),
      content_language() {}

ParsedHeaders::ParsedHeaders(
    std::vector<::network::mojom::ContentSecurityPolicyPtr> content_security_policy_in,
    ::network::mojom::AllowCSPFromHeaderValuePtr allow_csp_from_in,
    const ::network::CrossOriginEmbedderPolicy& cross_origin_embedder_policy_in,
    const ::network::CrossOriginOpenerPolicy& cross_origin_opener_policy_in,
    OriginAgentClusterValue origin_agent_cluster_in,
    absl::optional<std::vector<::network::mojom::WebClientHintsType>> accept_ch_in,
    absl::optional<std::vector<::network::mojom::WebClientHintsType>> critical_ch_in,
    ::network::mojom::XFrameOptionsValue xfo_in,
    std::vector<::network::mojom::LinkHeaderPtr> link_headers_in,
    ::network::mojom::TimingAllowOriginPtr timing_allow_origin_in,
    bool bfcache_opt_in_unload_in,
    const absl::optional<base::flat_map<std::string, std::string>>& reporting_endpoints_in,
    absl::optional<std::vector<::network::mojom::VariantsHeaderPtr>> variants_headers_in,
    absl::optional<std::vector<std::string>> content_language_in)
    : content_security_policy(std::move(content_security_policy_in)),
      allow_csp_from(std::move(allow_csp_from_in)),
      cross_origin_embedder_policy(std::move(cross_origin_embedder_policy_in)),
      cross_origin_opener_policy(std::move(cross_origin_opener_policy_in)),
      origin_agent_cluster(std::move(origin_agent_cluster_in)),
      accept_ch(std::move(accept_ch_in)),
      critical_ch(std::move(critical_ch_in)),
      xfo(std::move(xfo_in)),
      link_headers(std::move(link_headers_in)),
      timing_allow_origin(std::move(timing_allow_origin_in)),
      bfcache_opt_in_unload(std::move(bfcache_opt_in_unload_in)),
      reporting_endpoints(std::move(reporting_endpoints_in)),
      variants_headers(std::move(variants_headers_in)),
      content_language(std::move(content_language_in)) {}

ParsedHeaders::~ParsedHeaders() = default;

void ParsedHeaders::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "content_security_policy"), this->content_security_policy,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type std::vector<::network::mojom::ContentSecurityPolicyPtr>>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "allow_csp_from"), this->allow_csp_from,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type ::network::mojom::AllowCSPFromHeaderValuePtr>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "cross_origin_embedder_policy"), this->cross_origin_embedder_policy,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const ::network::CrossOriginEmbedderPolicy&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "cross_origin_opener_policy"), this->cross_origin_opener_policy,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const ::network::CrossOriginOpenerPolicy&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "origin_agent_cluster"), this->origin_agent_cluster,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type OriginAgentClusterValue>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "accept_ch"), this->accept_ch,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const absl::optional<std::vector<::network::mojom::WebClientHintsType>>&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "critical_ch"), this->critical_ch,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const absl::optional<std::vector<::network::mojom::WebClientHintsType>>&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "xfo"), this->xfo,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type ::network::mojom::XFrameOptionsValue>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "link_headers"), this->link_headers,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type std::vector<::network::mojom::LinkHeaderPtr>>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "timing_allow_origin"), this->timing_allow_origin,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type ::network::mojom::TimingAllowOriginPtr>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "bfcache_opt_in_unload"), this->bfcache_opt_in_unload,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "reporting_endpoints"), this->reporting_endpoints,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const absl::optional<base::flat_map<std::string, std::string>>&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "variants_headers"), this->variants_headers,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type absl::optional<std::vector<::network::mojom::VariantsHeaderPtr>>>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "content_language"), this->content_language,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const absl::optional<std::vector<std::string>>&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool ParsedHeaders::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}


}  // namespace mojom
}  // namespace network


namespace mojo {


// static
bool StructTraits<::network::mojom::ParsedHeaders::DataView, ::network::mojom::ParsedHeadersPtr>::Read(
    ::network::mojom::ParsedHeaders::DataView input,
    ::network::mojom::ParsedHeadersPtr* output) {
  bool success = true;
  ::network::mojom::ParsedHeadersPtr result(::network::mojom::ParsedHeaders::New());
  
      if (success && !input.ReadContentSecurityPolicy(&result->content_security_policy))
        success = false;
      if (success && !input.ReadAllowCspFrom(&result->allow_csp_from))
        success = false;
      if (success && !input.ReadCrossOriginEmbedderPolicy(&result->cross_origin_embedder_policy))
        success = false;
      if (success && !input.ReadCrossOriginOpenerPolicy(&result->cross_origin_opener_policy))
        success = false;
      if (success && !input.ReadOriginAgentCluster(&result->origin_agent_cluster))
        success = false;
      if (success && !input.ReadAcceptCh(&result->accept_ch))
        success = false;
      if (success && !input.ReadCriticalCh(&result->critical_ch))
        success = false;
      if (success && !input.ReadXfo(&result->xfo))
        success = false;
      if (success && !input.ReadLinkHeaders(&result->link_headers))
        success = false;
      if (success && !input.ReadTimingAllowOrigin(&result->timing_allow_origin))
        success = false;
      if (success)
        result->bfcache_opt_in_unload = input.bfcache_opt_in_unload();
      if (success && !input.ReadReportingEndpoints(&result->reporting_endpoints))
        success = false;
      if (success && !input.ReadVariantsHeaders(&result->variants_headers))
        success = false;
      if (success && !input.ReadContentLanguage(&result->content_language))
        success = false;
  *output = std::move(result);
  return success;
}

}  // namespace mojo


// Symbols declared in the -test-utils.h header are defined here instead of a
// separate .cc file to save compile time.


namespace network {
namespace mojom {




}  // namespace mojom
}  // namespace network


#if defined(__clang__)
#pragma clang diagnostic pop
#endif