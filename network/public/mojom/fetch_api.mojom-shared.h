// services/network/public/mojom/fetch_api.mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef SERVICES_NETWORK_PUBLIC_MOJOM_FETCH_API_MOJOM_SHARED_H_
#define SERVICES_NETWORK_PUBLIC_MOJOM_FETCH_API_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <iosfwd>
#include <type_traits>
#include <utility>

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "services/network/public/mojom/fetch_api.mojom-shared-internal.h"







namespace network {
namespace mojom {


}  // namespace mojom
}  // namespace network

namespace mojo {
namespace internal {

}  // namespace internal
}  // namespace mojo


namespace network {
namespace mojom {


enum class RequestMode : int32_t {
  
  kSameOrigin = 0,
  
  kNoCors = 1,
  
  kCors = 2,
  
  kCorsWithForcedPreflight = 3,
  
  kNavigate = 4,
  kMinValue = 0,
  kMaxValue = 4,
};

 std::ostream& operator<<(std::ostream& os, RequestMode value);
inline bool IsKnownEnumValue(RequestMode value) {
  return internal::RequestMode_Data::IsKnownValue(
      static_cast<int32_t>(value));
}


enum class RequestDestination : int32_t {
  
  kEmpty = 0,
  
  kAudio = 1,
  
  kAudioWorklet = 2,
  
  kDocument = 3,
  
  kEmbed = 4,
  
  kFont = 5,
  
  kFrame = 6,
  
  kIframe = 7,
  
  kImage = 8,
  
  kManifest = 9,
  
  kObject = 10,
  
  kPaintWorklet = 11,
  
  kReport = 12,
  
  kScript = 13,
  
  kServiceWorker = 14,
  
  kSharedWorker = 15,
  
  kStyle = 16,
  
  kTrack = 17,
  
  kVideo = 18,
  
  kWebBundle = 19,
  
  kWorker = 20,
  
  kXslt = 21,
  
  kFencedframe = 22,
  kMinValue = 0,
  kMaxValue = 22,
};

 std::ostream& operator<<(std::ostream& os, RequestDestination value);
inline bool IsKnownEnumValue(RequestDestination value) {
  return internal::RequestDestination_Data::IsKnownValue(
      static_cast<int32_t>(value));
}


enum class RedirectMode : int32_t {
  
  kFollow = 0,
  
  kError = 1,
  
  kManual = 2,
  kMinValue = 0,
  kMaxValue = 2,
};

 std::ostream& operator<<(std::ostream& os, RedirectMode value);
inline bool IsKnownEnumValue(RedirectMode value) {
  return internal::RedirectMode_Data::IsKnownValue(
      static_cast<int32_t>(value));
}


enum class CredentialsMode : int32_t {
  
  kOmit = 0,
  
  kSameOrigin = 1,
  
  kInclude = 2,
  
  kOmitBug_775438_Workaround = 3,
  kMinValue = 0,
  kMaxValue = 3,
};

 std::ostream& operator<<(std::ostream& os, CredentialsMode value);
inline bool IsKnownEnumValue(CredentialsMode value) {
  return internal::CredentialsMode_Data::IsKnownValue(
      static_cast<int32_t>(value));
}


enum class FetchResponseType : int32_t {
  
  kBasic = 0,
  
  kCors = 1,
  
  kDefault = 2,
  
  kError = 3,
  
  kOpaque = 4,
  
  kOpaqueRedirect = 5,
  kMinValue = 0,
  kMaxValue = 5,
};

 std::ostream& operator<<(std::ostream& os, FetchResponseType value);
inline bool IsKnownEnumValue(FetchResponseType value) {
  return internal::FetchResponseType_Data::IsKnownValue(
      static_cast<int32_t>(value));
}


enum class FetchResponseSource : int32_t {
  
  kUnspecified = 0,
  
  kNetwork = 1,
  
  kHttpCache = 2,
  
  kCacheStorage = 3,
  kMinValue = 0,
  kMaxValue = 3,
};

 std::ostream& operator<<(std::ostream& os, FetchResponseSource value);
inline bool IsKnownEnumValue(FetchResponseSource value) {
  return internal::FetchResponseSource_Data::IsKnownValue(
      static_cast<int32_t>(value));
}


}  // namespace mojom
}  // namespace network

namespace std {

template <>
struct hash<::network::mojom::RequestMode>
    : public mojo::internal::EnumHashImpl<::network::mojom::RequestMode> {};

template <>
struct hash<::network::mojom::RequestDestination>
    : public mojo::internal::EnumHashImpl<::network::mojom::RequestDestination> {};

template <>
struct hash<::network::mojom::RedirectMode>
    : public mojo::internal::EnumHashImpl<::network::mojom::RedirectMode> {};

template <>
struct hash<::network::mojom::CredentialsMode>
    : public mojo::internal::EnumHashImpl<::network::mojom::CredentialsMode> {};

template <>
struct hash<::network::mojom::FetchResponseType>
    : public mojo::internal::EnumHashImpl<::network::mojom::FetchResponseType> {};

template <>
struct hash<::network::mojom::FetchResponseSource>
    : public mojo::internal::EnumHashImpl<::network::mojom::FetchResponseSource> {};

}  // namespace std

namespace mojo {


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::network::mojom::RequestMode, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::network::mojom::RequestMode, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(::mojo::internal::ToKnownEnumValueHelper(
        static_cast<::network::mojom::RequestMode>(input)), output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::network::mojom::RequestDestination, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::network::mojom::RequestDestination, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(::mojo::internal::ToKnownEnumValueHelper(
        static_cast<::network::mojom::RequestDestination>(input)), output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::network::mojom::RedirectMode, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::network::mojom::RedirectMode, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(::mojo::internal::ToKnownEnumValueHelper(
        static_cast<::network::mojom::RedirectMode>(input)), output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::network::mojom::CredentialsMode, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::network::mojom::CredentialsMode, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(::mojo::internal::ToKnownEnumValueHelper(
        static_cast<::network::mojom::CredentialsMode>(input)), output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::network::mojom::FetchResponseType, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::network::mojom::FetchResponseType, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(::mojo::internal::ToKnownEnumValueHelper(
        static_cast<::network::mojom::FetchResponseType>(input)), output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::network::mojom::FetchResponseSource, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::network::mojom::FetchResponseSource, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(::mojo::internal::ToKnownEnumValueHelper(
        static_cast<::network::mojom::FetchResponseSource>(input)), output);
  }
};

}  // namespace internal

}  // namespace mojo


namespace network {
namespace mojom {


}  // namespace mojom
}  // namespace network

// Declare TraceFormatTraits for enums, which should be defined in ::perfetto
// namespace.

namespace perfetto {

template <>
struct  TraceFormatTraits<::network::mojom::RequestMode> {
 static void WriteIntoTrace(perfetto::TracedValue context, ::network::mojom::RequestMode value);
};

} // namespace perfetto

namespace perfetto {

template <>
struct  TraceFormatTraits<::network::mojom::RequestDestination> {
 static void WriteIntoTrace(perfetto::TracedValue context, ::network::mojom::RequestDestination value);
};

} // namespace perfetto

namespace perfetto {

template <>
struct  TraceFormatTraits<::network::mojom::RedirectMode> {
 static void WriteIntoTrace(perfetto::TracedValue context, ::network::mojom::RedirectMode value);
};

} // namespace perfetto

namespace perfetto {

template <>
struct  TraceFormatTraits<::network::mojom::CredentialsMode> {
 static void WriteIntoTrace(perfetto::TracedValue context, ::network::mojom::CredentialsMode value);
};

} // namespace perfetto

namespace perfetto {

template <>
struct  TraceFormatTraits<::network::mojom::FetchResponseType> {
 static void WriteIntoTrace(perfetto::TracedValue context, ::network::mojom::FetchResponseType value);
};

} // namespace perfetto

namespace perfetto {

template <>
struct  TraceFormatTraits<::network::mojom::FetchResponseSource> {
 static void WriteIntoTrace(perfetto::TracedValue context, ::network::mojom::FetchResponseSource value);
};

} // namespace perfetto

#endif  // SERVICES_NETWORK_PUBLIC_MOJOM_FETCH_API_MOJOM_SHARED_H_