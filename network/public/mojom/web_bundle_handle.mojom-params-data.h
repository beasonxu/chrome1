// services/network/public/mojom/web_bundle_handle.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef SERVICES_NETWORK_PUBLIC_MOJOM_WEB_BUNDLE_HANDLE_MOJOM_PARAMS_DATA_H_
#define SERVICES_NETWORK_PUBLIC_MOJOM_WEB_BUNDLE_HANDLE_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace network {
namespace mojom {
namespace internal {

class ValidationContext;
class  WebBundleHandle_Clone_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Handle_Data receiver;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<WebBundleHandle_Clone_Params_Data>;

  WebBundleHandle_Clone_Params_Data();
  ~WebBundleHandle_Clone_Params_Data() = delete;
};
static_assert(sizeof(WebBundleHandle_Clone_Params_Data) == 16,
              "Bad sizeof(WebBundleHandle_Clone_Params_Data)");
class  WebBundleHandle_OnWebBundleError_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t type;
  uint8_t pad0_[4];
  mojo::internal::Pointer<mojo::internal::String_Data> message;

 private:
  friend class mojo::internal::MessageFragment<WebBundleHandle_OnWebBundleError_Params_Data>;

  WebBundleHandle_OnWebBundleError_Params_Data();
  ~WebBundleHandle_OnWebBundleError_Params_Data() = delete;
};
static_assert(sizeof(WebBundleHandle_OnWebBundleError_Params_Data) == 24,
              "Bad sizeof(WebBundleHandle_OnWebBundleError_Params_Data)");
class  WebBundleHandle_OnWebBundleLoadFinished_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t success : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<WebBundleHandle_OnWebBundleLoadFinished_Params_Data>;

  WebBundleHandle_OnWebBundleLoadFinished_Params_Data();
  ~WebBundleHandle_OnWebBundleLoadFinished_Params_Data() = delete;
};
static_assert(sizeof(WebBundleHandle_OnWebBundleLoadFinished_Params_Data) == 16,
              "Bad sizeof(WebBundleHandle_OnWebBundleLoadFinished_Params_Data)");

}  // namespace internal


class WebBundleHandle_Clone_ParamsDataView {
 public:
  WebBundleHandle_Clone_ParamsDataView() = default;

  WebBundleHandle_Clone_ParamsDataView(
      internal::WebBundleHandle_Clone_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeReceiver() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::network::mojom::WebBundleHandleInterfaceBase>>(
            &data_->receiver, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::WebBundleHandle_Clone_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class WebBundleHandle_OnWebBundleError_ParamsDataView {
 public:
  WebBundleHandle_OnWebBundleError_ParamsDataView() = default;

  WebBundleHandle_OnWebBundleError_ParamsDataView(
      internal::WebBundleHandle_OnWebBundleError_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadType(UserType* output) const {
    auto data_value = data_->type;
    return mojo::internal::Deserialize<::network::mojom::WebBundleErrorType>(
        data_value, output);
  }
  WebBundleErrorType type() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::network::mojom::WebBundleErrorType>(data_->type));
  }
  inline void GetMessageDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadMessage(UserType* output) {
    
    auto* pointer = data_->message.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
 private:
  internal::WebBundleHandle_OnWebBundleError_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class WebBundleHandle_OnWebBundleLoadFinished_ParamsDataView {
 public:
  WebBundleHandle_OnWebBundleLoadFinished_ParamsDataView() = default;

  WebBundleHandle_OnWebBundleLoadFinished_ParamsDataView(
      internal::WebBundleHandle_OnWebBundleLoadFinished_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool success() const {
    return data_->success;
  }
 private:
  internal::WebBundleHandle_OnWebBundleLoadFinished_Params_Data* data_ = nullptr;
};




inline void WebBundleHandle_OnWebBundleError_ParamsDataView::GetMessageDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->message.Get();
  *output = mojo::StringDataView(pointer, message_);
}



}  // namespace mojom
}  // namespace network

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // SERVICES_NETWORK_PUBLIC_MOJOM_WEB_BUNDLE_HANDLE_MOJOM_PARAMS_DATA_H_