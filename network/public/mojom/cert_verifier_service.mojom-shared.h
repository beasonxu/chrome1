// services/network/public/mojom/cert_verifier_service.mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef SERVICES_NETWORK_PUBLIC_MOJOM_CERT_VERIFIER_SERVICE_MOJOM_SHARED_H_
#define SERVICES_NETWORK_PUBLIC_MOJOM_CERT_VERIFIER_SERVICE_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <iosfwd>
#include <type_traits>
#include <utility>
#include "mojo/public/cpp/bindings/array_data_view.h"
#include "mojo/public/cpp/bindings/enum_traits.h"
#include "mojo/public/cpp/bindings/interface_data_view.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/map_data_view.h"
#include "mojo/public/cpp/bindings/string_data_view.h"

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "services/network/public/mojom/cert_verifier_service.mojom-shared-internal.h"
#include "mojo/public/mojom/base/big_buffer.mojom-shared.h"
#include "mojo/public/mojom/base/byte_string.mojom-shared.h"
#include "mojo/public/mojom/base/time.mojom-shared.h"
#include "services/network/public/mojom/network_param.mojom-shared.h"
#include "services/network/public/mojom/url_loader_factory.mojom-shared.h"
#include "mojo/public/cpp/bindings/lib/interface_serialization.h"


#include "mojo/public/cpp/bindings/native_enum.h"
#include "mojo/public/cpp/bindings/lib/native_struct_serialization.h"




namespace cert_verifier {
namespace mojom {
class RequestParamsDataView;

class CertVerifierConfigDataView;



}  // namespace mojom
}  // namespace cert_verifier

namespace mojo {
namespace internal {

template <>
struct MojomTypeTraits<::cert_verifier::mojom::RequestParamsDataView> {
  using Data = ::cert_verifier::mojom::internal::RequestParams_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::cert_verifier::mojom::CertVerifierConfigDataView> {
  using Data = ::cert_verifier::mojom::internal::CertVerifierConfig_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

}  // namespace internal
}  // namespace mojo


namespace cert_verifier {
namespace mojom {
// Interface base classes. They are used for type safety check.
class URLLoaderFactoryConnectorInterfaceBase {};

using URLLoaderFactoryConnectorPtrDataView =
    mojo::InterfacePtrDataView<URLLoaderFactoryConnectorInterfaceBase>;
using URLLoaderFactoryConnectorRequestDataView =
    mojo::InterfaceRequestDataView<URLLoaderFactoryConnectorInterfaceBase>;
using URLLoaderFactoryConnectorAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<URLLoaderFactoryConnectorInterfaceBase>;
using URLLoaderFactoryConnectorAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<URLLoaderFactoryConnectorInterfaceBase>;
class CertVerifierServiceInterfaceBase {};

using CertVerifierServicePtrDataView =
    mojo::InterfacePtrDataView<CertVerifierServiceInterfaceBase>;
using CertVerifierServiceRequestDataView =
    mojo::InterfaceRequestDataView<CertVerifierServiceInterfaceBase>;
using CertVerifierServiceAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<CertVerifierServiceInterfaceBase>;
using CertVerifierServiceAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<CertVerifierServiceInterfaceBase>;
class CertVerifierRequestInterfaceBase {};

using CertVerifierRequestPtrDataView =
    mojo::InterfacePtrDataView<CertVerifierRequestInterfaceBase>;
using CertVerifierRequestRequestDataView =
    mojo::InterfaceRequestDataView<CertVerifierRequestInterfaceBase>;
using CertVerifierRequestAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<CertVerifierRequestInterfaceBase>;
using CertVerifierRequestAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<CertVerifierRequestInterfaceBase>;


class RequestParamsDataView {
 public:
  RequestParamsDataView() = default;

  RequestParamsDataView(
      internal::RequestParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetCertificateDataView(
      ::network::mojom::X509CertificateDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadCertificate(UserType* output) {
    
    auto* pointer = data_->certificate.Get();
    return mojo::internal::Deserialize<::network::mojom::X509CertificateDataView>(
        pointer, output, message_);
  }
  inline void GetHostnameDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadHostname(UserType* output) {
    
    auto* pointer = data_->hostname.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  int32_t flags() const {
    return data_->flags;
  }
  inline void GetOcspResponseDataView(
      ::mojo_base::mojom::ByteStringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadOcspResponse(UserType* output) {
    
    auto* pointer = data_->ocsp_response.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::ByteStringDataView>(
        pointer, output, message_);
  }
  inline void GetSctListDataView(
      ::mojo_base::mojom::ByteStringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadSctList(UserType* output) {
    
    auto* pointer = data_->sct_list.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::ByteStringDataView>(
        pointer, output, message_);
  }
 private:
  internal::RequestParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class CertVerifierConfigDataView {
 public:
  CertVerifierConfigDataView() = default;

  CertVerifierConfigDataView(
      internal::CertVerifierConfig_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  bool enable_rev_checking() const {
    return data_->enable_rev_checking;
  }
  bool require_rev_checking_local_anchors() const {
    return data_->require_rev_checking_local_anchors;
  }
  bool enable_sha1_local_anchors() const {
    return data_->enable_sha1_local_anchors;
  }
  bool disable_symantec_enforcement() const {
    return data_->disable_symantec_enforcement;
  }
  inline void GetCrlSetDataView(
      ::mojo_base::mojom::BigBufferDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadCrlSet(UserType* output) {
    
    auto* pointer = !data_->crl_set.is_null() ? &data_->crl_set : nullptr;
    return mojo::internal::Deserialize<::mojo_base::mojom::BigBufferDataView>(
        pointer, output, message_);
  }
  inline void GetAdditionalTrustAnchorsDataView(
      mojo::ArrayDataView<::network::mojom::X509CertificateDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadAdditionalTrustAnchors(UserType* output) {
    
    auto* pointer = data_->additional_trust_anchors.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::network::mojom::X509CertificateDataView>>(
        pointer, output, message_);
  }
  inline void GetAdditionalUntrustedAuthoritiesDataView(
      mojo::ArrayDataView<::network::mojom::X509CertificateDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadAdditionalUntrustedAuthorities(UserType* output) {
    
    auto* pointer = data_->additional_untrusted_authorities.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::network::mojom::X509CertificateDataView>>(
        pointer, output, message_);
  }
 private:
  internal::CertVerifierConfig_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



}  // namespace mojom
}  // namespace cert_verifier

namespace std {

}  // namespace std

namespace mojo {


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::cert_verifier::mojom::RequestParamsDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::cert_verifier::mojom::RequestParamsDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::cert_verifier::mojom::internal::RequestParams_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    decltype(Traits::certificate(input)) in_certificate = Traits::certificate(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->certificate)::BaseType> certificate_fragment(
            fragment.message());
    mojo::internal::Serialize<::network::mojom::X509CertificateDataView>(
        in_certificate, certificate_fragment);
    fragment->certificate.Set(
        certificate_fragment.is_null() ? nullptr : certificate_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->certificate.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null certificate in RequestParams struct");
    decltype(Traits::hostname(input)) in_hostname = Traits::hostname(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->hostname)::BaseType> hostname_fragment(
            fragment.message());
    mojo::internal::Serialize<mojo::StringDataView>(
        in_hostname, hostname_fragment);
    fragment->hostname.Set(
        hostname_fragment.is_null() ? nullptr : hostname_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->hostname.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null hostname in RequestParams struct");
    fragment->flags = Traits::flags(input);
    decltype(Traits::ocsp_response(input)) in_ocsp_response = Traits::ocsp_response(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->ocsp_response)::BaseType> ocsp_response_fragment(
            fragment.message());
    mojo::internal::Serialize<::mojo_base::mojom::ByteStringDataView>(
        in_ocsp_response, ocsp_response_fragment);
    fragment->ocsp_response.Set(
        ocsp_response_fragment.is_null() ? nullptr : ocsp_response_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->ocsp_response.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null ocsp_response in RequestParams struct");
    decltype(Traits::sct_list(input)) in_sct_list = Traits::sct_list(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->sct_list)::BaseType> sct_list_fragment(
            fragment.message());
    mojo::internal::Serialize<::mojo_base::mojom::ByteStringDataView>(
        in_sct_list, sct_list_fragment);
    fragment->sct_list.Set(
        sct_list_fragment.is_null() ? nullptr : sct_list_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->sct_list.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null sct_list in RequestParams struct");
  }

  static bool Deserialize(::cert_verifier::mojom::internal::RequestParams_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::cert_verifier::mojom::RequestParamsDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::cert_verifier::mojom::CertVerifierConfigDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::cert_verifier::mojom::CertVerifierConfigDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::cert_verifier::mojom::internal::CertVerifierConfig_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    fragment->enable_rev_checking = Traits::enable_rev_checking(input);
    fragment->require_rev_checking_local_anchors = Traits::require_rev_checking_local_anchors(input);
    fragment->enable_sha1_local_anchors = Traits::enable_sha1_local_anchors(input);
    fragment->disable_symantec_enforcement = Traits::disable_symantec_enforcement(input);
    decltype(Traits::crl_set(input)) in_crl_set = Traits::crl_set(input);
    mojo::internal::MessageFragment<decltype(fragment->crl_set)>
        crl_set_fragment(fragment.message());
    crl_set_fragment.Claim(&fragment->crl_set);
    mojo::internal::Serialize<::mojo_base::mojom::BigBufferDataView>(
        in_crl_set, crl_set_fragment, true);
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->crl_set.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null crl_set in CertVerifierConfig struct");
    decltype(Traits::additional_trust_anchors(input)) in_additional_trust_anchors = Traits::additional_trust_anchors(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->additional_trust_anchors)::BaseType>
        additional_trust_anchors_fragment(fragment.message());
    const mojo::internal::ContainerValidateParams additional_trust_anchors_validate_params(
        0, false, nullptr);
    mojo::internal::Serialize<mojo::ArrayDataView<::network::mojom::X509CertificateDataView>>(
        in_additional_trust_anchors, additional_trust_anchors_fragment, &additional_trust_anchors_validate_params);
    fragment->additional_trust_anchors.Set(
        additional_trust_anchors_fragment.is_null() ? nullptr : additional_trust_anchors_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->additional_trust_anchors.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null additional_trust_anchors in CertVerifierConfig struct");
    decltype(Traits::additional_untrusted_authorities(input)) in_additional_untrusted_authorities = Traits::additional_untrusted_authorities(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->additional_untrusted_authorities)::BaseType>
        additional_untrusted_authorities_fragment(fragment.message());
    const mojo::internal::ContainerValidateParams additional_untrusted_authorities_validate_params(
        0, false, nullptr);
    mojo::internal::Serialize<mojo::ArrayDataView<::network::mojom::X509CertificateDataView>>(
        in_additional_untrusted_authorities, additional_untrusted_authorities_fragment, &additional_untrusted_authorities_validate_params);
    fragment->additional_untrusted_authorities.Set(
        additional_untrusted_authorities_fragment.is_null() ? nullptr : additional_untrusted_authorities_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->additional_untrusted_authorities.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null additional_untrusted_authorities in CertVerifierConfig struct");
  }

  static bool Deserialize(::cert_verifier::mojom::internal::CertVerifierConfig_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::cert_verifier::mojom::CertVerifierConfigDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal

}  // namespace mojo


namespace cert_verifier {
namespace mojom {

inline void RequestParamsDataView::GetCertificateDataView(
    ::network::mojom::X509CertificateDataView* output) {
  auto pointer = data_->certificate.Get();
  *output = ::network::mojom::X509CertificateDataView(pointer, message_);
}
inline void RequestParamsDataView::GetHostnameDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->hostname.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void RequestParamsDataView::GetOcspResponseDataView(
    ::mojo_base::mojom::ByteStringDataView* output) {
  auto pointer = data_->ocsp_response.Get();
  *output = ::mojo_base::mojom::ByteStringDataView(pointer, message_);
}
inline void RequestParamsDataView::GetSctListDataView(
    ::mojo_base::mojom::ByteStringDataView* output) {
  auto pointer = data_->sct_list.Get();
  *output = ::mojo_base::mojom::ByteStringDataView(pointer, message_);
}


inline void CertVerifierConfigDataView::GetCrlSetDataView(
    ::mojo_base::mojom::BigBufferDataView* output) {
  auto pointer = &data_->crl_set;
  *output = ::mojo_base::mojom::BigBufferDataView(pointer, message_);
}
inline void CertVerifierConfigDataView::GetAdditionalTrustAnchorsDataView(
    mojo::ArrayDataView<::network::mojom::X509CertificateDataView>* output) {
  auto pointer = data_->additional_trust_anchors.Get();
  *output = mojo::ArrayDataView<::network::mojom::X509CertificateDataView>(pointer, message_);
}
inline void CertVerifierConfigDataView::GetAdditionalUntrustedAuthoritiesDataView(
    mojo::ArrayDataView<::network::mojom::X509CertificateDataView>* output) {
  auto pointer = data_->additional_untrusted_authorities.Get();
  *output = mojo::ArrayDataView<::network::mojom::X509CertificateDataView>(pointer, message_);
}



}  // namespace mojom
}  // namespace cert_verifier

// Declare TraceFormatTraits for enums, which should be defined in ::perfetto
// namespace.

#endif  // SERVICES_NETWORK_PUBLIC_MOJOM_CERT_VERIFIER_SERVICE_MOJOM_SHARED_H_