// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: storage.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_storage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_storage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "public.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_storage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_storage_2eproto {
  static const uint32_t offsets[];
};
namespace network {
class TrustTokenIssuerConfig;
struct TrustTokenIssuerConfigDefaultTypeInternal;
extern TrustTokenIssuerConfigDefaultTypeInternal _TrustTokenIssuerConfig_default_instance_;
class TrustTokenIssuerToplevelPairConfig;
struct TrustTokenIssuerToplevelPairConfigDefaultTypeInternal;
extern TrustTokenIssuerToplevelPairConfigDefaultTypeInternal _TrustTokenIssuerToplevelPairConfig_default_instance_;
class TrustTokenToplevelConfig;
struct TrustTokenToplevelConfigDefaultTypeInternal;
extern TrustTokenToplevelConfigDefaultTypeInternal _TrustTokenToplevelConfig_default_instance_;
}  // namespace network
PROTOBUF_NAMESPACE_OPEN
template<> ::network::TrustTokenIssuerConfig* Arena::CreateMaybeMessage<::network::TrustTokenIssuerConfig>(Arena*);
template<> ::network::TrustTokenIssuerToplevelPairConfig* Arena::CreateMaybeMessage<::network::TrustTokenIssuerToplevelPairConfig>(Arena*);
template<> ::network::TrustTokenToplevelConfig* Arena::CreateMaybeMessage<::network::TrustTokenToplevelConfig>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace network {

// ===================================================================

class TrustTokenIssuerConfig final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:network.TrustTokenIssuerConfig) */ {
 public:
  inline TrustTokenIssuerConfig() : TrustTokenIssuerConfig(nullptr) {}
  ~TrustTokenIssuerConfig() override;
  explicit PROTOBUF_CONSTEXPR TrustTokenIssuerConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TrustTokenIssuerConfig(const TrustTokenIssuerConfig& from);
  TrustTokenIssuerConfig(TrustTokenIssuerConfig&& from) noexcept
    : TrustTokenIssuerConfig() {
    *this = ::std::move(from);
  }

  inline TrustTokenIssuerConfig& operator=(const TrustTokenIssuerConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrustTokenIssuerConfig& operator=(TrustTokenIssuerConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const TrustTokenIssuerConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const TrustTokenIssuerConfig* internal_default_instance() {
    return reinterpret_cast<const TrustTokenIssuerConfig*>(
               &_TrustTokenIssuerConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TrustTokenIssuerConfig& a, TrustTokenIssuerConfig& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(TrustTokenIssuerConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrustTokenIssuerConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TrustTokenIssuerConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TrustTokenIssuerConfig>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const TrustTokenIssuerConfig& from);
  void MergeFrom(const TrustTokenIssuerConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TrustTokenIssuerConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.TrustTokenIssuerConfig";
  }
  protected:
  explicit TrustTokenIssuerConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokensFieldNumber = 3,
    kLastIssuanceFieldNumber = 4,
  };
  // repeated .network.TrustToken tokens = 3;
  int tokens_size() const;
  private:
  int _internal_tokens_size() const;
  public:
  void clear_tokens();
  ::network::TrustToken* mutable_tokens(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TrustToken >*
      mutable_tokens();
  private:
  const ::network::TrustToken& _internal_tokens(int index) const;
  ::network::TrustToken* _internal_add_tokens();
  public:
  const ::network::TrustToken& tokens(int index) const;
  ::network::TrustToken* add_tokens();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TrustToken >&
      tokens() const;

  // optional string last_issuance = 4;
  bool has_last_issuance() const;
  private:
  bool _internal_has_last_issuance() const;
  public:
  void clear_last_issuance();
  const std::string& last_issuance() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_last_issuance(ArgT0&& arg0, ArgT... args);
  std::string* mutable_last_issuance();
  PROTOBUF_NODISCARD std::string* release_last_issuance();
  void set_allocated_last_issuance(std::string* last_issuance);
  private:
  const std::string& _internal_last_issuance() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_last_issuance(const std::string& value);
  std::string* _internal_mutable_last_issuance();
  public:

  // @@protoc_insertion_point(class_scope:network.TrustTokenIssuerConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TrustToken > tokens_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr last_issuance_;
  friend struct ::TableStruct_storage_2eproto;
};
// -------------------------------------------------------------------

class TrustTokenToplevelConfig final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:network.TrustTokenToplevelConfig) */ {
 public:
  inline TrustTokenToplevelConfig() : TrustTokenToplevelConfig(nullptr) {}
  ~TrustTokenToplevelConfig() override;
  explicit PROTOBUF_CONSTEXPR TrustTokenToplevelConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TrustTokenToplevelConfig(const TrustTokenToplevelConfig& from);
  TrustTokenToplevelConfig(TrustTokenToplevelConfig&& from) noexcept
    : TrustTokenToplevelConfig() {
    *this = ::std::move(from);
  }

  inline TrustTokenToplevelConfig& operator=(const TrustTokenToplevelConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrustTokenToplevelConfig& operator=(TrustTokenToplevelConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const TrustTokenToplevelConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const TrustTokenToplevelConfig* internal_default_instance() {
    return reinterpret_cast<const TrustTokenToplevelConfig*>(
               &_TrustTokenToplevelConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TrustTokenToplevelConfig& a, TrustTokenToplevelConfig& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(TrustTokenToplevelConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrustTokenToplevelConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TrustTokenToplevelConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TrustTokenToplevelConfig>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const TrustTokenToplevelConfig& from);
  void MergeFrom(const TrustTokenToplevelConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TrustTokenToplevelConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.TrustTokenToplevelConfig";
  }
  protected:
  explicit TrustTokenToplevelConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAssociatedIssuersFieldNumber = 1,
  };
  // repeated string associated_issuers = 1;
  int associated_issuers_size() const;
  private:
  int _internal_associated_issuers_size() const;
  public:
  void clear_associated_issuers();
  const std::string& associated_issuers(int index) const;
  std::string* mutable_associated_issuers(int index);
  void set_associated_issuers(int index, const std::string& value);
  void set_associated_issuers(int index, std::string&& value);
  void set_associated_issuers(int index, const char* value);
  void set_associated_issuers(int index, const char* value, size_t size);
  std::string* add_associated_issuers();
  void add_associated_issuers(const std::string& value);
  void add_associated_issuers(std::string&& value);
  void add_associated_issuers(const char* value);
  void add_associated_issuers(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& associated_issuers() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_associated_issuers();
  private:
  const std::string& _internal_associated_issuers(int index) const;
  std::string* _internal_add_associated_issuers();
  public:

  // @@protoc_insertion_point(class_scope:network.TrustTokenToplevelConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> associated_issuers_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_storage_2eproto;
};
// -------------------------------------------------------------------

class TrustTokenIssuerToplevelPairConfig final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:network.TrustTokenIssuerToplevelPairConfig) */ {
 public:
  inline TrustTokenIssuerToplevelPairConfig() : TrustTokenIssuerToplevelPairConfig(nullptr) {}
  ~TrustTokenIssuerToplevelPairConfig() override;
  explicit PROTOBUF_CONSTEXPR TrustTokenIssuerToplevelPairConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TrustTokenIssuerToplevelPairConfig(const TrustTokenIssuerToplevelPairConfig& from);
  TrustTokenIssuerToplevelPairConfig(TrustTokenIssuerToplevelPairConfig&& from) noexcept
    : TrustTokenIssuerToplevelPairConfig() {
    *this = ::std::move(from);
  }

  inline TrustTokenIssuerToplevelPairConfig& operator=(const TrustTokenIssuerToplevelPairConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrustTokenIssuerToplevelPairConfig& operator=(TrustTokenIssuerToplevelPairConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const TrustTokenIssuerToplevelPairConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const TrustTokenIssuerToplevelPairConfig* internal_default_instance() {
    return reinterpret_cast<const TrustTokenIssuerToplevelPairConfig*>(
               &_TrustTokenIssuerToplevelPairConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TrustTokenIssuerToplevelPairConfig& a, TrustTokenIssuerToplevelPairConfig& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(TrustTokenIssuerToplevelPairConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrustTokenIssuerToplevelPairConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TrustTokenIssuerToplevelPairConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TrustTokenIssuerToplevelPairConfig>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const TrustTokenIssuerToplevelPairConfig& from);
  void MergeFrom(const TrustTokenIssuerToplevelPairConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TrustTokenIssuerToplevelPairConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.TrustTokenIssuerToplevelPairConfig";
  }
  protected:
  explicit TrustTokenIssuerToplevelPairConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLastRedemptionFieldNumber = 1,
    kRedemptionRecordFieldNumber = 2,
  };
  // optional string last_redemption = 1;
  bool has_last_redemption() const;
  private:
  bool _internal_has_last_redemption() const;
  public:
  void clear_last_redemption();
  const std::string& last_redemption() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_last_redemption(ArgT0&& arg0, ArgT... args);
  std::string* mutable_last_redemption();
  PROTOBUF_NODISCARD std::string* release_last_redemption();
  void set_allocated_last_redemption(std::string* last_redemption);
  private:
  const std::string& _internal_last_redemption() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_last_redemption(const std::string& value);
  std::string* _internal_mutable_last_redemption();
  public:

  // optional .network.TrustTokenRedemptionRecord redemption_record = 2;
  bool has_redemption_record() const;
  private:
  bool _internal_has_redemption_record() const;
  public:
  void clear_redemption_record();
  const ::network::TrustTokenRedemptionRecord& redemption_record() const;
  PROTOBUF_NODISCARD ::network::TrustTokenRedemptionRecord* release_redemption_record();
  ::network::TrustTokenRedemptionRecord* mutable_redemption_record();
  void set_allocated_redemption_record(::network::TrustTokenRedemptionRecord* redemption_record);
  private:
  const ::network::TrustTokenRedemptionRecord& _internal_redemption_record() const;
  ::network::TrustTokenRedemptionRecord* _internal_mutable_redemption_record();
  public:
  void unsafe_arena_set_allocated_redemption_record(
      ::network::TrustTokenRedemptionRecord* redemption_record);
  ::network::TrustTokenRedemptionRecord* unsafe_arena_release_redemption_record();

  // @@protoc_insertion_point(class_scope:network.TrustTokenIssuerToplevelPairConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr last_redemption_;
  ::network::TrustTokenRedemptionRecord* redemption_record_;
  friend struct ::TableStruct_storage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TrustTokenIssuerConfig

// repeated .network.TrustToken tokens = 3;
inline int TrustTokenIssuerConfig::_internal_tokens_size() const {
  return tokens_.size();
}
inline int TrustTokenIssuerConfig::tokens_size() const {
  return _internal_tokens_size();
}
inline ::network::TrustToken* TrustTokenIssuerConfig::mutable_tokens(int index) {
  // @@protoc_insertion_point(field_mutable:network.TrustTokenIssuerConfig.tokens)
  return tokens_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TrustToken >*
TrustTokenIssuerConfig::mutable_tokens() {
  // @@protoc_insertion_point(field_mutable_list:network.TrustTokenIssuerConfig.tokens)
  return &tokens_;
}
inline const ::network::TrustToken& TrustTokenIssuerConfig::_internal_tokens(int index) const {
  return tokens_.Get(index);
}
inline const ::network::TrustToken& TrustTokenIssuerConfig::tokens(int index) const {
  // @@protoc_insertion_point(field_get:network.TrustTokenIssuerConfig.tokens)
  return _internal_tokens(index);
}
inline ::network::TrustToken* TrustTokenIssuerConfig::_internal_add_tokens() {
  return tokens_.Add();
}
inline ::network::TrustToken* TrustTokenIssuerConfig::add_tokens() {
  ::network::TrustToken* _add = _internal_add_tokens();
  // @@protoc_insertion_point(field_add:network.TrustTokenIssuerConfig.tokens)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TrustToken >&
TrustTokenIssuerConfig::tokens() const {
  // @@protoc_insertion_point(field_list:network.TrustTokenIssuerConfig.tokens)
  return tokens_;
}

// optional string last_issuance = 4;
inline bool TrustTokenIssuerConfig::_internal_has_last_issuance() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TrustTokenIssuerConfig::has_last_issuance() const {
  return _internal_has_last_issuance();
}
inline void TrustTokenIssuerConfig::clear_last_issuance() {
  last_issuance_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TrustTokenIssuerConfig::last_issuance() const {
  // @@protoc_insertion_point(field_get:network.TrustTokenIssuerConfig.last_issuance)
  return _internal_last_issuance();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TrustTokenIssuerConfig::set_last_issuance(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 last_issuance_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.TrustTokenIssuerConfig.last_issuance)
}
inline std::string* TrustTokenIssuerConfig::mutable_last_issuance() {
  std::string* _s = _internal_mutable_last_issuance();
  // @@protoc_insertion_point(field_mutable:network.TrustTokenIssuerConfig.last_issuance)
  return _s;
}
inline const std::string& TrustTokenIssuerConfig::_internal_last_issuance() const {
  return last_issuance_.Get();
}
inline void TrustTokenIssuerConfig::_internal_set_last_issuance(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  last_issuance_.Set(value, GetArenaForAllocation());
}
inline std::string* TrustTokenIssuerConfig::_internal_mutable_last_issuance() {
  _has_bits_[0] |= 0x00000001u;
  return last_issuance_.Mutable(GetArenaForAllocation());
}
inline std::string* TrustTokenIssuerConfig::release_last_issuance() {
  // @@protoc_insertion_point(field_release:network.TrustTokenIssuerConfig.last_issuance)
  if (!_internal_has_last_issuance()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = last_issuance_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (last_issuance_.IsDefault()) {
    last_issuance_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TrustTokenIssuerConfig::set_allocated_last_issuance(std::string* last_issuance) {
  if (last_issuance != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  last_issuance_.SetAllocated(last_issuance, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (last_issuance_.IsDefault()) {
    last_issuance_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.TrustTokenIssuerConfig.last_issuance)
}

// -------------------------------------------------------------------

// TrustTokenToplevelConfig

// repeated string associated_issuers = 1;
inline int TrustTokenToplevelConfig::_internal_associated_issuers_size() const {
  return associated_issuers_.size();
}
inline int TrustTokenToplevelConfig::associated_issuers_size() const {
  return _internal_associated_issuers_size();
}
inline void TrustTokenToplevelConfig::clear_associated_issuers() {
  associated_issuers_.Clear();
}
inline std::string* TrustTokenToplevelConfig::add_associated_issuers() {
  std::string* _s = _internal_add_associated_issuers();
  // @@protoc_insertion_point(field_add_mutable:network.TrustTokenToplevelConfig.associated_issuers)
  return _s;
}
inline const std::string& TrustTokenToplevelConfig::_internal_associated_issuers(int index) const {
  return associated_issuers_.Get(index);
}
inline const std::string& TrustTokenToplevelConfig::associated_issuers(int index) const {
  // @@protoc_insertion_point(field_get:network.TrustTokenToplevelConfig.associated_issuers)
  return _internal_associated_issuers(index);
}
inline std::string* TrustTokenToplevelConfig::mutable_associated_issuers(int index) {
  // @@protoc_insertion_point(field_mutable:network.TrustTokenToplevelConfig.associated_issuers)
  return associated_issuers_.Mutable(index);
}
inline void TrustTokenToplevelConfig::set_associated_issuers(int index, const std::string& value) {
  associated_issuers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:network.TrustTokenToplevelConfig.associated_issuers)
}
inline void TrustTokenToplevelConfig::set_associated_issuers(int index, std::string&& value) {
  associated_issuers_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:network.TrustTokenToplevelConfig.associated_issuers)
}
inline void TrustTokenToplevelConfig::set_associated_issuers(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  associated_issuers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:network.TrustTokenToplevelConfig.associated_issuers)
}
inline void TrustTokenToplevelConfig::set_associated_issuers(int index, const char* value, size_t size) {
  associated_issuers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:network.TrustTokenToplevelConfig.associated_issuers)
}
inline std::string* TrustTokenToplevelConfig::_internal_add_associated_issuers() {
  return associated_issuers_.Add();
}
inline void TrustTokenToplevelConfig::add_associated_issuers(const std::string& value) {
  associated_issuers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:network.TrustTokenToplevelConfig.associated_issuers)
}
inline void TrustTokenToplevelConfig::add_associated_issuers(std::string&& value) {
  associated_issuers_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:network.TrustTokenToplevelConfig.associated_issuers)
}
inline void TrustTokenToplevelConfig::add_associated_issuers(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  associated_issuers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:network.TrustTokenToplevelConfig.associated_issuers)
}
inline void TrustTokenToplevelConfig::add_associated_issuers(const char* value, size_t size) {
  associated_issuers_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:network.TrustTokenToplevelConfig.associated_issuers)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TrustTokenToplevelConfig::associated_issuers() const {
  // @@protoc_insertion_point(field_list:network.TrustTokenToplevelConfig.associated_issuers)
  return associated_issuers_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TrustTokenToplevelConfig::mutable_associated_issuers() {
  // @@protoc_insertion_point(field_mutable_list:network.TrustTokenToplevelConfig.associated_issuers)
  return &associated_issuers_;
}

// -------------------------------------------------------------------

// TrustTokenIssuerToplevelPairConfig

// optional string last_redemption = 1;
inline bool TrustTokenIssuerToplevelPairConfig::_internal_has_last_redemption() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TrustTokenIssuerToplevelPairConfig::has_last_redemption() const {
  return _internal_has_last_redemption();
}
inline void TrustTokenIssuerToplevelPairConfig::clear_last_redemption() {
  last_redemption_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TrustTokenIssuerToplevelPairConfig::last_redemption() const {
  // @@protoc_insertion_point(field_get:network.TrustTokenIssuerToplevelPairConfig.last_redemption)
  return _internal_last_redemption();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TrustTokenIssuerToplevelPairConfig::set_last_redemption(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 last_redemption_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.TrustTokenIssuerToplevelPairConfig.last_redemption)
}
inline std::string* TrustTokenIssuerToplevelPairConfig::mutable_last_redemption() {
  std::string* _s = _internal_mutable_last_redemption();
  // @@protoc_insertion_point(field_mutable:network.TrustTokenIssuerToplevelPairConfig.last_redemption)
  return _s;
}
inline const std::string& TrustTokenIssuerToplevelPairConfig::_internal_last_redemption() const {
  return last_redemption_.Get();
}
inline void TrustTokenIssuerToplevelPairConfig::_internal_set_last_redemption(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  last_redemption_.Set(value, GetArenaForAllocation());
}
inline std::string* TrustTokenIssuerToplevelPairConfig::_internal_mutable_last_redemption() {
  _has_bits_[0] |= 0x00000001u;
  return last_redemption_.Mutable(GetArenaForAllocation());
}
inline std::string* TrustTokenIssuerToplevelPairConfig::release_last_redemption() {
  // @@protoc_insertion_point(field_release:network.TrustTokenIssuerToplevelPairConfig.last_redemption)
  if (!_internal_has_last_redemption()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = last_redemption_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (last_redemption_.IsDefault()) {
    last_redemption_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TrustTokenIssuerToplevelPairConfig::set_allocated_last_redemption(std::string* last_redemption) {
  if (last_redemption != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  last_redemption_.SetAllocated(last_redemption, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (last_redemption_.IsDefault()) {
    last_redemption_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.TrustTokenIssuerToplevelPairConfig.last_redemption)
}

// optional .network.TrustTokenRedemptionRecord redemption_record = 2;
inline bool TrustTokenIssuerToplevelPairConfig::_internal_has_redemption_record() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || redemption_record_ != nullptr);
  return value;
}
inline bool TrustTokenIssuerToplevelPairConfig::has_redemption_record() const {
  return _internal_has_redemption_record();
}
inline const ::network::TrustTokenRedemptionRecord& TrustTokenIssuerToplevelPairConfig::_internal_redemption_record() const {
  const ::network::TrustTokenRedemptionRecord* p = redemption_record_;
  return p != nullptr ? *p : reinterpret_cast<const ::network::TrustTokenRedemptionRecord&>(
      ::network::_TrustTokenRedemptionRecord_default_instance_);
}
inline const ::network::TrustTokenRedemptionRecord& TrustTokenIssuerToplevelPairConfig::redemption_record() const {
  // @@protoc_insertion_point(field_get:network.TrustTokenIssuerToplevelPairConfig.redemption_record)
  return _internal_redemption_record();
}
inline void TrustTokenIssuerToplevelPairConfig::unsafe_arena_set_allocated_redemption_record(
    ::network::TrustTokenRedemptionRecord* redemption_record) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(redemption_record_);
  }
  redemption_record_ = redemption_record;
  if (redemption_record) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:network.TrustTokenIssuerToplevelPairConfig.redemption_record)
}
inline ::network::TrustTokenRedemptionRecord* TrustTokenIssuerToplevelPairConfig::release_redemption_record() {
  _has_bits_[0] &= ~0x00000002u;
  ::network::TrustTokenRedemptionRecord* temp = redemption_record_;
  redemption_record_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::network::TrustTokenRedemptionRecord* TrustTokenIssuerToplevelPairConfig::unsafe_arena_release_redemption_record() {
  // @@protoc_insertion_point(field_release:network.TrustTokenIssuerToplevelPairConfig.redemption_record)
  _has_bits_[0] &= ~0x00000002u;
  ::network::TrustTokenRedemptionRecord* temp = redemption_record_;
  redemption_record_ = nullptr;
  return temp;
}
inline ::network::TrustTokenRedemptionRecord* TrustTokenIssuerToplevelPairConfig::_internal_mutable_redemption_record() {
  _has_bits_[0] |= 0x00000002u;
  if (redemption_record_ == nullptr) {
    auto* p = CreateMaybeMessage<::network::TrustTokenRedemptionRecord>(GetArenaForAllocation());
    redemption_record_ = p;
  }
  return redemption_record_;
}
inline ::network::TrustTokenRedemptionRecord* TrustTokenIssuerToplevelPairConfig::mutable_redemption_record() {
  ::network::TrustTokenRedemptionRecord* _msg = _internal_mutable_redemption_record();
  // @@protoc_insertion_point(field_mutable:network.TrustTokenIssuerToplevelPairConfig.redemption_record)
  return _msg;
}
inline void TrustTokenIssuerToplevelPairConfig::set_allocated_redemption_record(::network::TrustTokenRedemptionRecord* redemption_record) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(redemption_record_);
  }
  if (redemption_record) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(redemption_record));
    if (message_arena != submessage_arena) {
      redemption_record = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, redemption_record, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  redemption_record_ = redemption_record;
  // @@protoc_insertion_point(field_set_allocated:network.TrustTokenIssuerToplevelPairConfig.redemption_record)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace network

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_storage_2eproto
