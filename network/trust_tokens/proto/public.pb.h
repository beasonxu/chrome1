// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: public.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_public_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_public_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_public_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_public_2eproto {
  static const uint32_t offsets[];
};
namespace network {
class TrustToken;
struct TrustTokenDefaultTypeInternal;
extern TrustTokenDefaultTypeInternal _TrustToken_default_instance_;
class TrustTokenRedemptionRecord;
struct TrustTokenRedemptionRecordDefaultTypeInternal;
extern TrustTokenRedemptionRecordDefaultTypeInternal _TrustTokenRedemptionRecord_default_instance_;
}  // namespace network
PROTOBUF_NAMESPACE_OPEN
template<> ::network::TrustToken* Arena::CreateMaybeMessage<::network::TrustToken>(Arena*);
template<> ::network::TrustTokenRedemptionRecord* Arena::CreateMaybeMessage<::network::TrustTokenRedemptionRecord>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace network {

// ===================================================================

class TrustToken final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:network.TrustToken) */ {
 public:
  inline TrustToken() : TrustToken(nullptr) {}
  ~TrustToken() override;
  explicit PROTOBUF_CONSTEXPR TrustToken(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TrustToken(const TrustToken& from);
  TrustToken(TrustToken&& from) noexcept
    : TrustToken() {
    *this = ::std::move(from);
  }

  inline TrustToken& operator=(const TrustToken& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrustToken& operator=(TrustToken&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const TrustToken& default_instance() {
    return *internal_default_instance();
  }
  static inline const TrustToken* internal_default_instance() {
    return reinterpret_cast<const TrustToken*>(
               &_TrustToken_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TrustToken& a, TrustToken& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(TrustToken* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrustToken* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TrustToken* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TrustToken>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const TrustToken& from);
  void MergeFrom(const TrustToken& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TrustToken* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.TrustToken";
  }
  protected:
  explicit TrustToken(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBodyFieldNumber = 1,
    kSigningKeyFieldNumber = 2,
  };
  // optional bytes body = 1;
  bool has_body() const;
  private:
  bool _internal_has_body() const;
  public:
  void clear_body();
  const std::string& body() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_body(ArgT0&& arg0, ArgT... args);
  std::string* mutable_body();
  PROTOBUF_NODISCARD std::string* release_body();
  void set_allocated_body(std::string* body);
  private:
  const std::string& _internal_body() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_body(const std::string& value);
  std::string* _internal_mutable_body();
  public:

  // optional bytes signing_key = 2;
  bool has_signing_key() const;
  private:
  bool _internal_has_signing_key() const;
  public:
  void clear_signing_key();
  const std::string& signing_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_signing_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_signing_key();
  PROTOBUF_NODISCARD std::string* release_signing_key();
  void set_allocated_signing_key(std::string* signing_key);
  private:
  const std::string& _internal_signing_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_signing_key(const std::string& value);
  std::string* _internal_mutable_signing_key();
  public:

  // @@protoc_insertion_point(class_scope:network.TrustToken)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr body_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signing_key_;
  friend struct ::TableStruct_public_2eproto;
};
// -------------------------------------------------------------------

class TrustTokenRedemptionRecord final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:network.TrustTokenRedemptionRecord) */ {
 public:
  inline TrustTokenRedemptionRecord() : TrustTokenRedemptionRecord(nullptr) {}
  ~TrustTokenRedemptionRecord() override;
  explicit PROTOBUF_CONSTEXPR TrustTokenRedemptionRecord(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TrustTokenRedemptionRecord(const TrustTokenRedemptionRecord& from);
  TrustTokenRedemptionRecord(TrustTokenRedemptionRecord&& from) noexcept
    : TrustTokenRedemptionRecord() {
    *this = ::std::move(from);
  }

  inline TrustTokenRedemptionRecord& operator=(const TrustTokenRedemptionRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrustTokenRedemptionRecord& operator=(TrustTokenRedemptionRecord&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const TrustTokenRedemptionRecord& default_instance() {
    return *internal_default_instance();
  }
  static inline const TrustTokenRedemptionRecord* internal_default_instance() {
    return reinterpret_cast<const TrustTokenRedemptionRecord*>(
               &_TrustTokenRedemptionRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TrustTokenRedemptionRecord& a, TrustTokenRedemptionRecord& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(TrustTokenRedemptionRecord* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrustTokenRedemptionRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TrustTokenRedemptionRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TrustTokenRedemptionRecord>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const TrustTokenRedemptionRecord& from);
  void MergeFrom(const TrustTokenRedemptionRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TrustTokenRedemptionRecord* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.TrustTokenRedemptionRecord";
  }
  protected:
  explicit TrustTokenRedemptionRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBodyFieldNumber = 1,
    kPublicKeyFieldNumber = 2,
    kSigningKeyFieldNumber = 3,
    kTokenVerificationKeyFieldNumber = 4,
    kLifetimeFieldNumber = 5,
  };
  // optional bytes body = 1;
  bool has_body() const;
  private:
  bool _internal_has_body() const;
  public:
  void clear_body();
  const std::string& body() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_body(ArgT0&& arg0, ArgT... args);
  std::string* mutable_body();
  PROTOBUF_NODISCARD std::string* release_body();
  void set_allocated_body(std::string* body);
  private:
  const std::string& _internal_body() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_body(const std::string& value);
  std::string* _internal_mutable_body();
  public:

  // optional bytes public_key = 2;
  bool has_public_key() const;
  private:
  bool _internal_has_public_key() const;
  public:
  void clear_public_key();
  const std::string& public_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_public_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_public_key();
  PROTOBUF_NODISCARD std::string* release_public_key();
  void set_allocated_public_key(std::string* public_key);
  private:
  const std::string& _internal_public_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_public_key(const std::string& value);
  std::string* _internal_mutable_public_key();
  public:

  // optional bytes signing_key = 3;
  bool has_signing_key() const;
  private:
  bool _internal_has_signing_key() const;
  public:
  void clear_signing_key();
  const std::string& signing_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_signing_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_signing_key();
  PROTOBUF_NODISCARD std::string* release_signing_key();
  void set_allocated_signing_key(std::string* signing_key);
  private:
  const std::string& _internal_signing_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_signing_key(const std::string& value);
  std::string* _internal_mutable_signing_key();
  public:

  // optional bytes token_verification_key = 4;
  bool has_token_verification_key() const;
  private:
  bool _internal_has_token_verification_key() const;
  public:
  void clear_token_verification_key();
  const std::string& token_verification_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token_verification_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token_verification_key();
  PROTOBUF_NODISCARD std::string* release_token_verification_key();
  void set_allocated_token_verification_key(std::string* token_verification_key);
  private:
  const std::string& _internal_token_verification_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token_verification_key(const std::string& value);
  std::string* _internal_mutable_token_verification_key();
  public:

  // optional uint64 lifetime = 5;
  bool has_lifetime() const;
  private:
  bool _internal_has_lifetime() const;
  public:
  void clear_lifetime();
  uint64_t lifetime() const;
  void set_lifetime(uint64_t value);
  private:
  uint64_t _internal_lifetime() const;
  void _internal_set_lifetime(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.TrustTokenRedemptionRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr body_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr public_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signing_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_verification_key_;
  uint64_t lifetime_;
  friend struct ::TableStruct_public_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TrustToken

// optional bytes body = 1;
inline bool TrustToken::_internal_has_body() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TrustToken::has_body() const {
  return _internal_has_body();
}
inline void TrustToken::clear_body() {
  body_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TrustToken::body() const {
  // @@protoc_insertion_point(field_get:network.TrustToken.body)
  return _internal_body();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TrustToken::set_body(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 body_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.TrustToken.body)
}
inline std::string* TrustToken::mutable_body() {
  std::string* _s = _internal_mutable_body();
  // @@protoc_insertion_point(field_mutable:network.TrustToken.body)
  return _s;
}
inline const std::string& TrustToken::_internal_body() const {
  return body_.Get();
}
inline void TrustToken::_internal_set_body(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  body_.Set(value, GetArenaForAllocation());
}
inline std::string* TrustToken::_internal_mutable_body() {
  _has_bits_[0] |= 0x00000001u;
  return body_.Mutable(GetArenaForAllocation());
}
inline std::string* TrustToken::release_body() {
  // @@protoc_insertion_point(field_release:network.TrustToken.body)
  if (!_internal_has_body()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = body_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (body_.IsDefault()) {
    body_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TrustToken::set_allocated_body(std::string* body) {
  if (body != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  body_.SetAllocated(body, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (body_.IsDefault()) {
    body_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.TrustToken.body)
}

// optional bytes signing_key = 2;
inline bool TrustToken::_internal_has_signing_key() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TrustToken::has_signing_key() const {
  return _internal_has_signing_key();
}
inline void TrustToken::clear_signing_key() {
  signing_key_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TrustToken::signing_key() const {
  // @@protoc_insertion_point(field_get:network.TrustToken.signing_key)
  return _internal_signing_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TrustToken::set_signing_key(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 signing_key_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.TrustToken.signing_key)
}
inline std::string* TrustToken::mutable_signing_key() {
  std::string* _s = _internal_mutable_signing_key();
  // @@protoc_insertion_point(field_mutable:network.TrustToken.signing_key)
  return _s;
}
inline const std::string& TrustToken::_internal_signing_key() const {
  return signing_key_.Get();
}
inline void TrustToken::_internal_set_signing_key(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  signing_key_.Set(value, GetArenaForAllocation());
}
inline std::string* TrustToken::_internal_mutable_signing_key() {
  _has_bits_[0] |= 0x00000002u;
  return signing_key_.Mutable(GetArenaForAllocation());
}
inline std::string* TrustToken::release_signing_key() {
  // @@protoc_insertion_point(field_release:network.TrustToken.signing_key)
  if (!_internal_has_signing_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = signing_key_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (signing_key_.IsDefault()) {
    signing_key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TrustToken::set_allocated_signing_key(std::string* signing_key) {
  if (signing_key != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  signing_key_.SetAllocated(signing_key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (signing_key_.IsDefault()) {
    signing_key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.TrustToken.signing_key)
}

// -------------------------------------------------------------------

// TrustTokenRedemptionRecord

// optional bytes body = 1;
inline bool TrustTokenRedemptionRecord::_internal_has_body() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TrustTokenRedemptionRecord::has_body() const {
  return _internal_has_body();
}
inline void TrustTokenRedemptionRecord::clear_body() {
  body_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TrustTokenRedemptionRecord::body() const {
  // @@protoc_insertion_point(field_get:network.TrustTokenRedemptionRecord.body)
  return _internal_body();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TrustTokenRedemptionRecord::set_body(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 body_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.TrustTokenRedemptionRecord.body)
}
inline std::string* TrustTokenRedemptionRecord::mutable_body() {
  std::string* _s = _internal_mutable_body();
  // @@protoc_insertion_point(field_mutable:network.TrustTokenRedemptionRecord.body)
  return _s;
}
inline const std::string& TrustTokenRedemptionRecord::_internal_body() const {
  return body_.Get();
}
inline void TrustTokenRedemptionRecord::_internal_set_body(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  body_.Set(value, GetArenaForAllocation());
}
inline std::string* TrustTokenRedemptionRecord::_internal_mutable_body() {
  _has_bits_[0] |= 0x00000001u;
  return body_.Mutable(GetArenaForAllocation());
}
inline std::string* TrustTokenRedemptionRecord::release_body() {
  // @@protoc_insertion_point(field_release:network.TrustTokenRedemptionRecord.body)
  if (!_internal_has_body()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = body_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (body_.IsDefault()) {
    body_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TrustTokenRedemptionRecord::set_allocated_body(std::string* body) {
  if (body != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  body_.SetAllocated(body, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (body_.IsDefault()) {
    body_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.TrustTokenRedemptionRecord.body)
}

// optional bytes public_key = 2;
inline bool TrustTokenRedemptionRecord::_internal_has_public_key() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TrustTokenRedemptionRecord::has_public_key() const {
  return _internal_has_public_key();
}
inline void TrustTokenRedemptionRecord::clear_public_key() {
  public_key_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TrustTokenRedemptionRecord::public_key() const {
  // @@protoc_insertion_point(field_get:network.TrustTokenRedemptionRecord.public_key)
  return _internal_public_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TrustTokenRedemptionRecord::set_public_key(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 public_key_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.TrustTokenRedemptionRecord.public_key)
}
inline std::string* TrustTokenRedemptionRecord::mutable_public_key() {
  std::string* _s = _internal_mutable_public_key();
  // @@protoc_insertion_point(field_mutable:network.TrustTokenRedemptionRecord.public_key)
  return _s;
}
inline const std::string& TrustTokenRedemptionRecord::_internal_public_key() const {
  return public_key_.Get();
}
inline void TrustTokenRedemptionRecord::_internal_set_public_key(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  public_key_.Set(value, GetArenaForAllocation());
}
inline std::string* TrustTokenRedemptionRecord::_internal_mutable_public_key() {
  _has_bits_[0] |= 0x00000002u;
  return public_key_.Mutable(GetArenaForAllocation());
}
inline std::string* TrustTokenRedemptionRecord::release_public_key() {
  // @@protoc_insertion_point(field_release:network.TrustTokenRedemptionRecord.public_key)
  if (!_internal_has_public_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = public_key_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (public_key_.IsDefault()) {
    public_key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TrustTokenRedemptionRecord::set_allocated_public_key(std::string* public_key) {
  if (public_key != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  public_key_.SetAllocated(public_key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (public_key_.IsDefault()) {
    public_key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.TrustTokenRedemptionRecord.public_key)
}

// optional bytes signing_key = 3;
inline bool TrustTokenRedemptionRecord::_internal_has_signing_key() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TrustTokenRedemptionRecord::has_signing_key() const {
  return _internal_has_signing_key();
}
inline void TrustTokenRedemptionRecord::clear_signing_key() {
  signing_key_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& TrustTokenRedemptionRecord::signing_key() const {
  // @@protoc_insertion_point(field_get:network.TrustTokenRedemptionRecord.signing_key)
  return _internal_signing_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TrustTokenRedemptionRecord::set_signing_key(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 signing_key_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.TrustTokenRedemptionRecord.signing_key)
}
inline std::string* TrustTokenRedemptionRecord::mutable_signing_key() {
  std::string* _s = _internal_mutable_signing_key();
  // @@protoc_insertion_point(field_mutable:network.TrustTokenRedemptionRecord.signing_key)
  return _s;
}
inline const std::string& TrustTokenRedemptionRecord::_internal_signing_key() const {
  return signing_key_.Get();
}
inline void TrustTokenRedemptionRecord::_internal_set_signing_key(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  signing_key_.Set(value, GetArenaForAllocation());
}
inline std::string* TrustTokenRedemptionRecord::_internal_mutable_signing_key() {
  _has_bits_[0] |= 0x00000004u;
  return signing_key_.Mutable(GetArenaForAllocation());
}
inline std::string* TrustTokenRedemptionRecord::release_signing_key() {
  // @@protoc_insertion_point(field_release:network.TrustTokenRedemptionRecord.signing_key)
  if (!_internal_has_signing_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = signing_key_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (signing_key_.IsDefault()) {
    signing_key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TrustTokenRedemptionRecord::set_allocated_signing_key(std::string* signing_key) {
  if (signing_key != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  signing_key_.SetAllocated(signing_key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (signing_key_.IsDefault()) {
    signing_key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.TrustTokenRedemptionRecord.signing_key)
}

// optional bytes token_verification_key = 4;
inline bool TrustTokenRedemptionRecord::_internal_has_token_verification_key() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TrustTokenRedemptionRecord::has_token_verification_key() const {
  return _internal_has_token_verification_key();
}
inline void TrustTokenRedemptionRecord::clear_token_verification_key() {
  token_verification_key_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& TrustTokenRedemptionRecord::token_verification_key() const {
  // @@protoc_insertion_point(field_get:network.TrustTokenRedemptionRecord.token_verification_key)
  return _internal_token_verification_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TrustTokenRedemptionRecord::set_token_verification_key(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 token_verification_key_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.TrustTokenRedemptionRecord.token_verification_key)
}
inline std::string* TrustTokenRedemptionRecord::mutable_token_verification_key() {
  std::string* _s = _internal_mutable_token_verification_key();
  // @@protoc_insertion_point(field_mutable:network.TrustTokenRedemptionRecord.token_verification_key)
  return _s;
}
inline const std::string& TrustTokenRedemptionRecord::_internal_token_verification_key() const {
  return token_verification_key_.Get();
}
inline void TrustTokenRedemptionRecord::_internal_set_token_verification_key(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  token_verification_key_.Set(value, GetArenaForAllocation());
}
inline std::string* TrustTokenRedemptionRecord::_internal_mutable_token_verification_key() {
  _has_bits_[0] |= 0x00000008u;
  return token_verification_key_.Mutable(GetArenaForAllocation());
}
inline std::string* TrustTokenRedemptionRecord::release_token_verification_key() {
  // @@protoc_insertion_point(field_release:network.TrustTokenRedemptionRecord.token_verification_key)
  if (!_internal_has_token_verification_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  auto* p = token_verification_key_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (token_verification_key_.IsDefault()) {
    token_verification_key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TrustTokenRedemptionRecord::set_allocated_token_verification_key(std::string* token_verification_key) {
  if (token_verification_key != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  token_verification_key_.SetAllocated(token_verification_key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (token_verification_key_.IsDefault()) {
    token_verification_key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.TrustTokenRedemptionRecord.token_verification_key)
}

// optional uint64 lifetime = 5;
inline bool TrustTokenRedemptionRecord::_internal_has_lifetime() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool TrustTokenRedemptionRecord::has_lifetime() const {
  return _internal_has_lifetime();
}
inline void TrustTokenRedemptionRecord::clear_lifetime() {
  lifetime_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000010u;
}
inline uint64_t TrustTokenRedemptionRecord::_internal_lifetime() const {
  return lifetime_;
}
inline uint64_t TrustTokenRedemptionRecord::lifetime() const {
  // @@protoc_insertion_point(field_get:network.TrustTokenRedemptionRecord.lifetime)
  return _internal_lifetime();
}
inline void TrustTokenRedemptionRecord::_internal_set_lifetime(uint64_t value) {
  _has_bits_[0] |= 0x00000010u;
  lifetime_ = value;
}
inline void TrustTokenRedemptionRecord::set_lifetime(uint64_t value) {
  _internal_set_lifetime(value);
  // @@protoc_insertion_point(field_set:network.TrustTokenRedemptionRecord.lifetime)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace network

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_public_2eproto
