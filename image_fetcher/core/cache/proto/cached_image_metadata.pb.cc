// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cached_image_metadata.proto

#include "cached_image_metadata.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace image_fetcher {
PROTOBUF_CONSTEXPR CachedImageMetadataProto::CachedImageMetadataProto(
    ::_pbi::ConstantInitialized)
  : key_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , creation_time_(int64_t{0})
  , last_used_time_(int64_t{0})
  , data_size_(int64_t{0})
  , needs_transcoding_(false)
  , cache_strategy_(0)

  , expiration_interval_(int64_t{0}){}
struct CachedImageMetadataProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CachedImageMetadataProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CachedImageMetadataProtoDefaultTypeInternal() {}
  union {
    CachedImageMetadataProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CachedImageMetadataProtoDefaultTypeInternal _CachedImageMetadataProto_default_instance_;
}  // namespace image_fetcher
namespace image_fetcher {
bool CacheStrategy_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> CacheStrategy_strings[2] = {};

static const char CacheStrategy_names[] =
  "BEST_EFFORT"
  "HOLD_UNTIL_EXPIRED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry CacheStrategy_entries[] = {
  { {CacheStrategy_names + 0, 11}, 0 },
  { {CacheStrategy_names + 11, 18}, 1 },
};

static const int CacheStrategy_entries_by_number[] = {
  0, // 0 -> BEST_EFFORT
  1, // 1 -> HOLD_UNTIL_EXPIRED
};

const std::string& CacheStrategy_Name(
    CacheStrategy value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          CacheStrategy_entries,
          CacheStrategy_entries_by_number,
          2, CacheStrategy_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      CacheStrategy_entries,
      CacheStrategy_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     CacheStrategy_strings[idx].get();
}
bool CacheStrategy_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CacheStrategy* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      CacheStrategy_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<CacheStrategy>(int_value);
  }
  return success;
}

// ===================================================================

class CachedImageMetadataProto::_Internal {
 public:
  using HasBits = decltype(std::declval<CachedImageMetadataProto>()._has_bits_);
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_creation_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_last_used_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_data_size(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_needs_transcoding(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_cache_strategy(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_expiration_interval(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

CachedImageMetadataProto::CachedImageMetadataProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:image_fetcher.CachedImageMetadataProto)
}
CachedImageMetadataProto::CachedImageMetadataProto(const CachedImageMetadataProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_key()) {
    key_.Set(from._internal_key(), 
      GetArenaForAllocation());
  }
  ::memcpy(&creation_time_, &from.creation_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&expiration_interval_) -
    reinterpret_cast<char*>(&creation_time_)) + sizeof(expiration_interval_));
  // @@protoc_insertion_point(copy_constructor:image_fetcher.CachedImageMetadataProto)
}

inline void CachedImageMetadataProto::SharedCtor() {
key_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  key_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&creation_time_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&expiration_interval_) -
    reinterpret_cast<char*>(&creation_time_)) + sizeof(expiration_interval_));
}

CachedImageMetadataProto::~CachedImageMetadataProto() {
  // @@protoc_insertion_point(destructor:image_fetcher.CachedImageMetadataProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CachedImageMetadataProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  key_.Destroy();
}

void CachedImageMetadataProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CachedImageMetadataProto::Clear() {
// @@protoc_insertion_point(message_clear_start:image_fetcher.CachedImageMetadataProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    key_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&creation_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&expiration_interval_) -
        reinterpret_cast<char*>(&creation_time_)) + sizeof(expiration_interval_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* CachedImageMetadataProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 creation_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_creation_time(&has_bits);
          creation_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 last_used_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_last_used_time(&has_bits);
          last_used_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 data_size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_data_size(&has_bits);
          data_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool needs_transcoding = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_needs_transcoding(&has_bits);
          needs_transcoding_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .image_fetcher.CacheStrategy cache_strategy = 6 [default = BEST_EFFORT];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::image_fetcher::CacheStrategy_IsValid(val))) {
            _internal_set_cache_strategy(static_cast<::image_fetcher::CacheStrategy>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional int64 expiration_interval = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_expiration_interval(&has_bits);
          expiration_interval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CachedImageMetadataProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:image_fetcher.CachedImageMetadataProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string key = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // optional int64 creation_time = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_creation_time(), target);
  }

  // optional int64 last_used_time = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_last_used_time(), target);
  }

  // optional int64 data_size = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_data_size(), target);
  }

  // optional bool needs_transcoding = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_needs_transcoding(), target);
  }

  // optional .image_fetcher.CacheStrategy cache_strategy = 6 [default = BEST_EFFORT];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_cache_strategy(), target);
  }

  // optional int64 expiration_interval = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(7, this->_internal_expiration_interval(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:image_fetcher.CachedImageMetadataProto)
  return target;
}

size_t CachedImageMetadataProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:image_fetcher.CachedImageMetadataProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string key = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_key());
    }

    // optional int64 creation_time = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_creation_time());
    }

    // optional int64 last_used_time = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_last_used_time());
    }

    // optional int64 data_size = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_data_size());
    }

    // optional bool needs_transcoding = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional .image_fetcher.CacheStrategy cache_strategy = 6 [default = BEST_EFFORT];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_cache_strategy());
    }

    // optional int64 expiration_interval = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_expiration_interval());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CachedImageMetadataProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CachedImageMetadataProto*>(
      &from));
}

void CachedImageMetadataProto::MergeFrom(const CachedImageMetadataProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:image_fetcher.CachedImageMetadataProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_key(from._internal_key());
    }
    if (cached_has_bits & 0x00000002u) {
      creation_time_ = from.creation_time_;
    }
    if (cached_has_bits & 0x00000004u) {
      last_used_time_ = from.last_used_time_;
    }
    if (cached_has_bits & 0x00000008u) {
      data_size_ = from.data_size_;
    }
    if (cached_has_bits & 0x00000010u) {
      needs_transcoding_ = from.needs_transcoding_;
    }
    if (cached_has_bits & 0x00000020u) {
      cache_strategy_ = from.cache_strategy_;
    }
    if (cached_has_bits & 0x00000040u) {
      expiration_interval_ = from.expiration_interval_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CachedImageMetadataProto::CopyFrom(const CachedImageMetadataProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:image_fetcher.CachedImageMetadataProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CachedImageMetadataProto::IsInitialized() const {
  return true;
}

void CachedImageMetadataProto::InternalSwap(CachedImageMetadataProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &key_, lhs_arena,
      &other->key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CachedImageMetadataProto, expiration_interval_)
      + sizeof(CachedImageMetadataProto::expiration_interval_)
      - PROTOBUF_FIELD_OFFSET(CachedImageMetadataProto, creation_time_)>(
          reinterpret_cast<char*>(&creation_time_),
          reinterpret_cast<char*>(&other->creation_time_));
}

std::string CachedImageMetadataProto::GetTypeName() const {
  return "image_fetcher.CachedImageMetadataProto";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace image_fetcher
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::image_fetcher::CachedImageMetadataProto*
Arena::CreateMaybeMessage< ::image_fetcher::CachedImageMetadataProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::image_fetcher::CachedImageMetadataProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
