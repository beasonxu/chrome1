// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/components/image_fetcher/ImageFetcherBridge

#ifndef org_chromium_components_image_fetcher_ImageFetcherBridge_JNI
#define org_chromium_components_image_fetcher_ImageFetcherBridge_JNI

#include <jni.h>

#include "../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace image_fetcher {

static base::android::ScopedJavaLocalRef<jstring> JNI_ImageFetcherBridge_GetFilePath(JNIEnv* env,
    const base::android::JavaParamRef<jobject>& simpleFactoryKeyHandle,
    const base::android::JavaParamRef<jstring>& url);

JNI_GENERATOR_EXPORT jstring Java_J_N_MDhGn9Di(
    JNIEnv* env,
    jclass jcaller,
    jobject simpleFactoryKeyHandle,
    jstring url) {
  return JNI_ImageFetcherBridge_GetFilePath(env, base::android::JavaParamRef<jobject>(env,
      simpleFactoryKeyHandle), base::android::JavaParamRef<jstring>(env, url)).Release();
}

static void JNI_ImageFetcherBridge_FetchImageData(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& simpleFactoryKeyHandle,
    jint config,
    const base::android::JavaParamRef<jstring>& url,
    const base::android::JavaParamRef<jstring>& clientName,
    jint expirationIntervalMinutes,
    const base::android::JavaParamRef<jobject>& callback);

JNI_GENERATOR_EXPORT void Java_J_N_Mno1Q7sp(
    JNIEnv* env,
    jclass jcaller,
    jobject simpleFactoryKeyHandle,
    jint config,
    jstring url,
    jstring clientName,
    jint expirationIntervalMinutes,
    jobject callback) {
  return JNI_ImageFetcherBridge_FetchImageData(env, base::android::JavaParamRef<jobject>(env,
      simpleFactoryKeyHandle), config, base::android::JavaParamRef<jstring>(env, url),
      base::android::JavaParamRef<jstring>(env, clientName), expirationIntervalMinutes,
      base::android::JavaParamRef<jobject>(env, callback));
}

static void JNI_ImageFetcherBridge_FetchImage(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& simpleFactoryKeyHandle,
    jint config,
    const base::android::JavaParamRef<jstring>& url,
    const base::android::JavaParamRef<jstring>& clientName,
    jint frameWidth,
    jint frameHeight,
    jint expirationIntervalMinutes,
    const base::android::JavaParamRef<jobject>& callback);

JNI_GENERATOR_EXPORT void Java_J_N_M3LHmG_1m(
    JNIEnv* env,
    jclass jcaller,
    jobject simpleFactoryKeyHandle,
    jint config,
    jstring url,
    jstring clientName,
    jint frameWidth,
    jint frameHeight,
    jint expirationIntervalMinutes,
    jobject callback) {
  return JNI_ImageFetcherBridge_FetchImage(env, base::android::JavaParamRef<jobject>(env,
      simpleFactoryKeyHandle), config, base::android::JavaParamRef<jstring>(env, url),
      base::android::JavaParamRef<jstring>(env, clientName), frameWidth, frameHeight,
      expirationIntervalMinutes, base::android::JavaParamRef<jobject>(env, callback));
}

static void JNI_ImageFetcherBridge_ReportEvent(JNIEnv* env, const
    base::android::JavaParamRef<jstring>& clientName,
    jint eventId);

JNI_GENERATOR_EXPORT void Java_J_N_Mlt0uwKm(
    JNIEnv* env,
    jclass jcaller,
    jstring clientName,
    jint eventId) {
  return JNI_ImageFetcherBridge_ReportEvent(env, base::android::JavaParamRef<jstring>(env,
      clientName), eventId);
}

static void JNI_ImageFetcherBridge_ReportCacheHitTime(JNIEnv* env, const
    base::android::JavaParamRef<jstring>& clientName,
    jlong startTimeMillis);

JNI_GENERATOR_EXPORT void Java_J_N_MNxzlAnV(
    JNIEnv* env,
    jclass jcaller,
    jstring clientName,
    jlong startTimeMillis) {
  return JNI_ImageFetcherBridge_ReportCacheHitTime(env, base::android::JavaParamRef<jstring>(env,
      clientName), startTimeMillis);
}

static void JNI_ImageFetcherBridge_ReportTotalFetchTimeFromNative(JNIEnv* env, const
    base::android::JavaParamRef<jstring>& clientName,
    jlong startTimeMillis);

JNI_GENERATOR_EXPORT void Java_J_N_MtnQwbxo(
    JNIEnv* env,
    jclass jcaller,
    jstring clientName,
    jlong startTimeMillis) {
  return JNI_ImageFetcherBridge_ReportTotalFetchTimeFromNative(env,
      base::android::JavaParamRef<jstring>(env, clientName), startTimeMillis);
}


}  // namespace image_fetcher

#endif  // org_chromium_components_image_fetcher_ImageFetcherBridge_JNI
