// FencedFrameReporting.java is auto generated by mojom_bindings_generator.py, do not edit


// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     third_party/blink/public/mojom/fenced_frame/fenced_frame.mojom
//

package org.chromium.blink.mojom;

import androidx.annotation.IntDef;


public final class FencedFrameReporting extends org.chromium.mojo.bindings.Struct {

    private static final int STRUCT_SIZE = 16;
    private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
    private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
    public java.util.Map<Integer, java.util.Map<String, org.chromium.url.mojom.Url>> metadata;

    private FencedFrameReporting(int version) {
        super(STRUCT_SIZE, version);
    }

    public FencedFrameReporting() {
        this(0);
    }

    public static FencedFrameReporting deserialize(org.chromium.mojo.bindings.Message message) {
        return decode(new org.chromium.mojo.bindings.Decoder(message));
    }

    /**
     * Similar to the method above, but deserializes from a |ByteBuffer| instance.
     *
     * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
     */
    public static FencedFrameReporting deserialize(java.nio.ByteBuffer data) {
        return deserialize(new org.chromium.mojo.bindings.Message(
                data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
    }

    @SuppressWarnings("unchecked")
    public static FencedFrameReporting decode(org.chromium.mojo.bindings.Decoder decoder0) {
        if (decoder0 == null) {
            return null;
        }
        decoder0.increaseStackDepth();
        FencedFrameReporting result;
        try {
            org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
            final int elementsOrVersion = mainDataHeader.elementsOrVersion;
            result = new FencedFrameReporting(elementsOrVersion);
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                {
                    decoder1.readDataHeaderForMap();
                    int[] keys0;
                    java.util.Map<String, org.chromium.url.mojom.Url>[] values0;
                    {
                        
                        keys0 = decoder1.readInts(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE, org.chromium.mojo.bindings.BindingsHelper.NOTHING_NULLABLE, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                        {
                            for (int i2 = 0; i2 < keys0.length; ++i2) {
                                ReportingDestination.validate(keys0[i2]);
                            }
                        }
                    }
                    {
                        
                        org.chromium.mojo.bindings.Decoder decoder2 = decoder1.readPointer(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE, false);
                        {
                            org.chromium.mojo.bindings.DataHeader si2 = decoder2.readDataHeaderForPointerArray(keys0.length);
                            values0 = new java.util.Map[si2.elementsOrVersion];
                            for (int i2 = 0; i2 < si2.elementsOrVersion; ++i2) {
                                
                                org.chromium.mojo.bindings.Decoder decoder3 = decoder2.readPointer(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i2, false);
                                {
                                    decoder3.readDataHeaderForMap();
                                    String[] keys2;
                                    org.chromium.url.mojom.Url[] values2;
                                    {
                                        
                                        org.chromium.mojo.bindings.Decoder decoder4 = decoder3.readPointer(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE, false);
                                        {
                                            org.chromium.mojo.bindings.DataHeader si4 = decoder4.readDataHeaderForPointerArray(org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                                            keys2 = new String[si4.elementsOrVersion];
                                            for (int i4 = 0; i4 < si4.elementsOrVersion; ++i4) {
                                                
                                                keys2[i4] = decoder4.readString(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i4, false);
                                            }
                                        }
                                    }
                                    {
                                        
                                        org.chromium.mojo.bindings.Decoder decoder4 = decoder3.readPointer(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE, false);
                                        {
                                            org.chromium.mojo.bindings.DataHeader si4 = decoder4.readDataHeaderForPointerArray(keys2.length);
                                            values2 = new org.chromium.url.mojom.Url[si4.elementsOrVersion];
                                            for (int i4 = 0; i4 < si4.elementsOrVersion; ++i4) {
                                                
                                                org.chromium.mojo.bindings.Decoder decoder5 = decoder4.readPointer(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i4, false);
                                                values2[i4] = org.chromium.url.mojom.Url.decode(decoder5);
                                            }
                                        }
                                    }
                                    values0[i2] = new java.util.HashMap<String, org.chromium.url.mojom.Url>();
                                    for (int index2 = 0; index2 < keys2.length; ++index2) {
                                        values0[i2].put(keys2[index2],  values2[index2]);
                                    }
                                }
                            }
                        }
                    }
                    result.metadata = new java.util.HashMap<Integer, java.util.Map<String, org.chromium.url.mojom.Url>>();
                    for (int index0 = 0; index0 < keys0.length; ++index0) {
                        result.metadata.put(keys0[index0],  values0[index0]);
                    }
                }
                }

        } finally {
            decoder0.decreaseStackDepth();
        }
        return result;
    }

    @SuppressWarnings("unchecked")
    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
        org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        
        if (this.metadata == null) {
            encoder0.encodeNullPointer(8, false);
        } else {
            org.chromium.mojo.bindings.Encoder encoder1 = encoder0.encoderForMap(8);
            int size0 = this.metadata.size();
            int[] keys0 = new int[size0];
            java.util.Map<String, org.chromium.url.mojom.Url>[] values0 = new java.util.Map[size0];
            int index0 = 0;
            for (java.util.Map.Entry<Integer, java.util.Map<String, org.chromium.url.mojom.Url>> entry0 : this.metadata.entrySet()) {
                keys0[index0] = entry0.getKey();
                values0[index0] = entry0.getValue();
                ++index0;
            }
            
            encoder1.encode(keys0, org.chromium.mojo.bindings.DataHeader.HEADER_SIZE, org.chromium.mojo.bindings.BindingsHelper.NOTHING_NULLABLE, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
            
            {
                org.chromium.mojo.bindings.Encoder encoder2 = encoder1.encodePointerArray(values0.length, org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                for (int i1 = 0; i1 < values0.length; ++i1) {
                    
                    if (values0[i1] == null) {
                        encoder2.encodeNullPointer(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1, false);
                    } else {
                        org.chromium.mojo.bindings.Encoder encoder3 = encoder2.encoderForMap(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1);
                        int size2 = values0[i1].size();
                        String[] keys2 = new String[size2];
                        org.chromium.url.mojom.Url[] values2 = new org.chromium.url.mojom.Url[size2];
                        int index2 = 0;
                        for (java.util.Map.Entry<String, org.chromium.url.mojom.Url> entry2 : values0[i1].entrySet()) {
                            keys2[index2] = entry2.getKey();
                            values2[index2] = entry2.getValue();
                            ++index2;
                        }
                        
                        {
                            org.chromium.mojo.bindings.Encoder encoder4 = encoder3.encodePointerArray(keys2.length, org.chromium.mojo.bindings.DataHeader.HEADER_SIZE, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                            for (int i3 = 0; i3 < keys2.length; ++i3) {
                                
                                encoder4.encode(keys2[i3], org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i3, false);
                            }
                        }
                        
                        {
                            org.chromium.mojo.bindings.Encoder encoder4 = encoder3.encodePointerArray(values2.length, org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                            for (int i3 = 0; i3 < values2.length; ++i3) {
                                
                                encoder4.encode(values2[i3], org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i3, false);
                            }
                        }
                    }
                }
            }
        }
    }
}